
AVRGCC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000454  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00000454  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000092  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a1  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a8  00000000  00000000  00001647  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ed  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000020dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000019c  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031a  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000062  00000000  00000000  00002622  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 30       	cpi	r26, 0x0E	; 14
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 28 02 	jmp	0x450	; 0x450 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>

#include "lcd.h"

void main()
{
  82:	ef 92       	push	r14
  84:	ff 92       	push	r15
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
     unsigned char i;

   //Initialize LCD module
   LCDInit(LS_BLINK|LS_ULINE);
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	0e 94 b9 01 	call	0x372	; 0x372 <LCDInit>

   //Clear the screen
   LCDClear();
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>

   //Simple string printing
   LCDWriteString("Congrats ");
  9c:	80 e6       	ldi	r24, 0x60	; 96
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 22 01 	call	0x244	; 0x244 <LCDWriteString>

   //A string on line 2
   LCDWriteStringXY(0,1,"Loading ");
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDGotoXY>
  ac:	8a e6       	ldi	r24, 0x6A	; 106
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 22 01 	call	0x244	; 0x244 <LCDWriteString>
  b4:	c0 e0       	ldi	r28, 0x00	; 0
  b6:	d0 e0       	ldi	r29, 0x00	; 0

   //Print some numbers
   for (i=0;i<99;i+=1)
   {
      LCDWriteIntXY(9,1,i,3);
      LCDWriteStringXY(12,1,"% ");
  b8:	0f 2e       	mov	r0, r31
  ba:	f3 e7       	ldi	r31, 0x73	; 115
  bc:	ef 2e       	mov	r14, r31
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	ff 2e       	mov	r15, r31
  c2:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	10 e0       	ldi	r17, 0x00	; 0
   LCDWriteStringXY(0,1,"Loading ");

   //Print some numbers
   for (i=0;i<99;i+=1)
   {
      LCDWriteIntXY(9,1,i,3);
  c8:	89 e0       	ldi	r24, 0x09	; 9
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDGotoXY>
  d0:	ce 01       	movw	r24, r28
  d2:	63 e0       	ldi	r22, 0x03	; 3
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	0e 94 46 01 	call	0x28c	; 0x28c <LCDWriteInt>
      LCDWriteStringXY(12,1,"% ");
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDGotoXY>
  e2:	c7 01       	movw	r24, r14
  e4:	0e 94 22 01 	call	0x244	; 0x244 <LCDWriteString>
  e8:	c8 01       	movw	r24, r16
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x68>
  ee:	c8 01       	movw	r24, r16
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x6e>
  f4:	c8 01       	movw	r24, r16
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x74>
  fa:	c8 01       	movw	r24, r16
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x7a>
 100:	21 96       	adiw	r28, 0x01	; 1

   //A string on line 2
   LCDWriteStringXY(0,1,"Loading ");

   //Print some numbers
   for (i=0;i<99;i+=1)
 102:	c3 36       	cpi	r28, 0x63	; 99
 104:	d1 05       	cpc	r29, r1
 106:	01 f7       	brne	.-64     	; 0xc8 <main+0x46>
      _delay_loop_2(0);

   }

   //Clear the screen
   LCDClear();
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>

   //Some more text

   LCDWriteString("Hello world");
 110:	86 e7       	ldi	r24, 0x76	; 118
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 22 01 	call	0x244	; 0x244 <LCDWriteString>
   LCDWriteStringXY(0,1,"By YourName Here");    // <--- Write ur NAME HERE !!!!!!!!!!!
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDGotoXY>
 120:	82 e8       	ldi	r24, 0x82	; 130
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 22 01 	call	0x244	; 0x244 <LCDWriteString>
 128:	44 e6       	ldi	r20, 0x64	; 100
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	c9 01       	movw	r24, r18
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0xae>
 134:	41 50       	subi	r20, 0x01	; 1

   //Wait
   for(i=0;i<100;i++) _delay_loop_2(0);
 136:	d9 f7       	brne	.-10     	; 0x12e <main+0xac>

   //Some More ......
   LCDClear();
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>
   LCDWriteString("    eXtreme");
 140:	83 e9       	ldi	r24, 0x93	; 147
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 22 01 	call	0x244	; 0x244 <LCDWriteString>
   LCDWriteStringXY(0,1,"  Electronics");
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDGotoXY>
 150:	8f e9       	ldi	r24, 0x9F	; 159
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 22 01 	call	0x244	; 0x244 <LCDWriteString>

	//Wait
   for(i=0;i<100;i++) _delay_loop_2(0);
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	c9 01       	movw	r24, r18
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0xde>
 164:	4f 5f       	subi	r20, 0xFF	; 255
 166:	44 36       	cpi	r20, 0x64	; 100
 168:	d1 f7       	brne	.-12     	; 0x15e <main+0xdc>

   //Custom Chars ......
   LCDClear();
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>
   LCDWriteString("Custom Char !!!");
 172:	8d ea       	ldi	r24, 0xAD	; 173
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 22 01 	call	0x244	; 0x244 <LCDWriteString>
   LCDWriteStringXY(0,1,"%0%1%2%3%4%5%6%7");
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDGotoXY>
 182:	8d eb       	ldi	r24, 0xBD	; 189
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 22 01 	call	0x244	; 0x244 <LCDWriteString>

}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	08 95       	ret

00000198 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 198:	87 b3       	in	r24, 0x17	; 23
 19a:	80 7f       	andi	r24, 0xF0	; 240
 19c:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
 19e:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
 1a0:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCDBusyLoop+0xc>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCDBusyLoop+0x12>

	
	do
	{

		SET_E();
 1aa:	c4 9a       	sbi	0x18, 4	; 24
 1ac:	92 e0       	ldi	r25, 0x02	; 2
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCDBusyLoop+0x16>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 1b4:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 1b6:	82 95       	swap	r24
 1b8:	80 7f       	andi	r24, 0xF0	; 240
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	9a 95       	dec	r25
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCDBusyLoop+0x24>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCDBusyLoop+0x2a>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 1c2:	c4 98       	cbi	0x18, 4	; 24
 1c4:	95 e0       	ldi	r25, 0x05	; 5
 1c6:	9a 95       	dec	r25
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDBusyLoop+0x2e>
		_delay_us(1);	//tEL

		SET_E();
 1ca:	c4 9a       	sbi	0x18, 4	; 24
 1cc:	92 e0       	ldi	r25, 0x02	; 2
 1ce:	9a 95       	dec	r25
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCDBusyLoop+0x36>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCDBusyLoop+0x3c>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 1d4:	96 b3       	in	r25, 0x16	; 22
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	9a 95       	dec	r25
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCDBusyLoop+0x40>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCDBusyLoop+0x46>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 1de:	c4 98       	cbi	0x18, 4	; 24
 1e0:	95 e0       	ldi	r25, 0x05	; 5
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDBusyLoop+0x4a>
		_delay_us(1);	//tEL
	}while(busy);
 1e6:	88 23       	and	r24, r24
 1e8:	04 f3       	brlt	.-64     	; 0x1aa <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 1ea:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 1ec:	87 b3       	in	r24, 0x17	; 23
 1ee:	8f 60       	ori	r24, 0x0F	; 15
 1f0:	87 bb       	out	0x17, r24	; 23

}
 1f2:	08 95       	ret

000001f4 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 1f4:	28 2f       	mov	r18, r24
 1f6:	22 95       	swap	r18
 1f8:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 1fa:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 1fc:	66 23       	and	r22, r22
 1fe:	11 f4       	brne	.+4      	; 0x204 <LCDByte+0x10>
	CLEAR_RS();
 200:	93 98       	cbi	0x12, 3	; 18
 202:	01 c0       	rjmp	.+2      	; 0x206 <LCDByte+0x12>
else
	SET_RS();
 204:	93 9a       	sbi	0x12, 3	; 18
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	9a 95       	dec	r25
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCDByte+0x14>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCDByte+0x1a>

_delay_us(0.500);		//tAS

SET_E();
 20e:	c4 9a       	sbi	0x18, 4	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 210:	98 b3       	in	r25, 0x18	; 24
 212:	90 7f       	andi	r25, 0xF0	; 240
 214:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 216:	98 bb       	out	0x18, r25	; 24
 218:	95 e0       	ldi	r25, 0x05	; 5
 21a:	9a 95       	dec	r25
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 21e:	c4 98       	cbi	0x18, 4	; 24
 220:	95 e0       	ldi	r25, 0x05	; 5
 222:	9a 95       	dec	r25
 224:	f1 f7       	brne	.-4      	; 0x222 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 226:	c4 9a       	sbi	0x18, 4	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 228:	98 b3       	in	r25, 0x18	; 24
 22a:	90 7f       	andi	r25, 0xF0	; 240
 22c:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 22e:	88 bb       	out	0x18, r24	; 24
 230:	85 e0       	ldi	r24, 0x05	; 5
 232:	8a 95       	dec	r24
 234:	f1 f7       	brne	.-4      	; 0x232 <LCDByte+0x3e>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 236:	c4 98       	cbi	0x18, 4	; 24
 238:	95 e0       	ldi	r25, 0x05	; 5
 23a:	9a 95       	dec	r25
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 23e:	0e 94 cc 00 	call	0x198	; 0x198 <LCDBusyLoop>
}
 242:	08 95       	ret

00000244 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 24a:	88 81       	ld	r24, Y
 24c:	88 23       	and	r24, r24
 24e:	d9 f0       	breq	.+54     	; 0x286 <LCDWriteString+0x42>
 {
 	//Custom Char Support
	if(*msg=='%')
 250:	85 32       	cpi	r24, 0x25	; 37
 252:	91 f4       	brne	.+36     	; 0x278 <LCDWriteString+0x34>
	{
		msg++;
 254:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 256:	88 81       	ld	r24, Y
 258:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 25a:	88 30       	cpi	r24, 0x08	; 8
 25c:	20 f4       	brcc	.+8      	; 0x266 <LCDWriteString+0x22>
		{
			LCDData(cc);
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>
 264:	0c c0       	rjmp	.+24     	; 0x27e <LCDWriteString+0x3a>
		}
		else
		{
			LCDData('%');
 266:	85 e2       	ldi	r24, 0x25	; 37
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>
			LCDData(*msg);
 26e:	88 81       	ld	r24, Y
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>
 276:	03 c0       	rjmp	.+6      	; 0x27e <LCDWriteString+0x3a>
		}
	}
	else
	{
		LCDData(*msg);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>
	}
	msg++;
 27e:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 280:	88 81       	ld	r24, Y
 282:	88 23       	and	r24, r24
 284:	29 f7       	brne	.-54     	; 0x250 <LCDWriteString+0xc>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 28c:	ef 92       	push	r14
 28e:	ff 92       	push	r15
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	df 93       	push	r29
 296:	cf 93       	push	r28
 298:	00 d0       	rcall	.+0      	; 0x29a <LCDWriteInt+0xe>
 29a:	00 d0       	rcall	.+0      	; 0x29c <LCDWriteInt+0x10>
 29c:	0f 92       	push	r0
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2a4:	fe 01       	movw	r30, r28
 2a6:	31 96       	adiw	r30, 0x01	; 1
 2a8:	25 e0       	ldi	r18, 0x05	; 5
 2aa:	df 01       	movw	r26, r30
 2ac:	1d 92       	st	X+, r1
 2ae:	2a 95       	dec	r18
 2b0:	e9 f7       	brne	.-6      	; 0x2ac <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	61 f0       	breq	.+24     	; 0x2ce <LCDWriteInt+0x42>
 2b6:	fe 01       	movw	r30, r28
 2b8:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
 2ba:	2a e0       	ldi	r18, 0x0A	; 10
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	b9 01       	movw	r22, r18
 2c0:	0e 94 01 02 	call	0x402	; 0x402 <__divmodhi4>
 2c4:	82 93       	st	-Z, r24
	val=val/10;
 2c6:	86 2f       	mov	r24, r22
 2c8:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	c1 f7       	brne	.-16     	; 0x2be <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2ce:	bf ef       	ldi	r27, 0xFF	; 255
 2d0:	eb 16       	cp	r14, r27
 2d2:	bf ef       	ldi	r27, 0xFF	; 255
 2d4:	fb 06       	cpc	r15, r27
 2d6:	69 f4       	brne	.+26     	; 0x2f2 <LCDWriteInt+0x66>
		while(str[j]==0) j++;
 2d8:	29 81       	ldd	r18, Y+1	; 0x01
 2da:	22 23       	and	r18, r18
 2dc:	79 f4       	brne	.+30     	; 0x2fc <LCDWriteInt+0x70>
 2de:	fe 01       	movw	r30, r28
 2e0:	32 96       	adiw	r30, 0x02	; 2
 2e2:	00 e0       	ldi	r16, 0x00	; 0
 2e4:	10 e0       	ldi	r17, 0x00	; 0
 2e6:	0f 5f       	subi	r16, 0xFF	; 255
 2e8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ea:	21 91       	ld	r18, Z+
 2ec:	22 23       	and	r18, r18
 2ee:	d9 f3       	breq	.-10     	; 0x2e6 <LCDWriteInt+0x5a>
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <LCDWriteInt+0x74>
	else
		j=5-field_length;
 2f2:	05 e0       	ldi	r16, 0x05	; 5
 2f4:	10 e0       	ldi	r17, 0x00	; 0
 2f6:	0e 19       	sub	r16, r14
 2f8:	1f 09       	sbc	r17, r15
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
 300:	99 23       	and	r25, r25
 302:	24 f4       	brge	.+8      	; 0x30c <LCDWriteInt+0x80>
 304:	8d e2       	ldi	r24, 0x2D	; 45
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>
	for(i=j;i<5;i++)
 30c:	05 30       	cpi	r16, 0x05	; 5
 30e:	11 05       	cpc	r17, r1
 310:	94 f4       	brge	.+36     	; 0x336 <LCDWriteInt+0xaa>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 312:	7e 01       	movw	r14, r28
 314:	08 94       	sec
 316:	e1 1c       	adc	r14, r1
 318:	f1 1c       	adc	r15, r1
 31a:	e0 0e       	add	r14, r16
 31c:	f1 1e       	adc	r15, r17
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 31e:	f7 01       	movw	r30, r14
 320:	81 91       	ld	r24, Z+
 322:	7f 01       	movw	r14, r30
 324:	80 5d       	subi	r24, 0xD0	; 208
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 32c:	0f 5f       	subi	r16, 0xFF	; 255
 32e:	1f 4f       	sbci	r17, 0xFF	; 255
 330:	05 30       	cpi	r16, 0x05	; 5
 332:	11 05       	cpc	r17, r1
 334:	a4 f3       	brlt	.-24     	; 0x31e <LCDWriteInt+0x92>
	{
	LCDData(48+str[i]);
	}
}
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	cf 91       	pop	r28
 342:	df 91       	pop	r29
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	08 95       	ret

0000034e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 34e:	84 31       	cpi	r24, 0x14	; 20
 350:	78 f4       	brcc	.+30     	; 0x370 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 352:	62 30       	cpi	r22, 0x02	; 2
 354:	31 f0       	breq	.+12     	; 0x362 <LCDGotoXY+0x14>
 356:	63 30       	cpi	r22, 0x03	; 3
 358:	31 f0       	breq	.+12     	; 0x366 <LCDGotoXY+0x18>
 35a:	61 30       	cpi	r22, 0x01	; 1
 35c:	29 f4       	brne	.+10     	; 0x368 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 35e:	80 64       	ori	r24, 0x40	; 64
			break;
 360:	03 c0       	rjmp	.+6      	; 0x368 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 362:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 364:	01 c0       	rjmp	.+2      	; 0x368 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 366:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 368:	80 68       	ori	r24, 0x80	; 128
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>
 370:	08 95       	ret

00000372 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	08 2f       	mov	r16, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	89 e9       	ldi	r24, 0x99	; 153
 37e:	99 e5       	ldi	r25, 0x59	; 89
 380:	a1 e0       	ldi	r26, 0x01	; 1
 382:	81 50       	subi	r24, 0x01	; 1
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	a0 40       	sbci	r26, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <LCDInit+0x10>
 38a:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 38c:	87 b3       	in	r24, 0x17	; 23
 38e:	8f 60       	ori	r24, 0x0F	; 15
 390:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 392:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 394:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 396:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 398:	88 b3       	in	r24, 0x18	; 24
 39a:	80 7f       	andi	r24, 0xF0	; 240
 39c:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 39e:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 3a0:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 3a2:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCDInit+0x34>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCDInit+0x36>
 3a8:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 3aa:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 3ac:	c1 9a       	sbi	0x18, 1	; 24
 3ae:	95 e0       	ldi	r25, 0x05	; 5
 3b0:	9a 95       	dec	r25
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCDInit+0x3e>
	_delay_us(1);
	CLEAR_E();
 3b4:	c4 98       	cbi	0x18, 4	; 24
 3b6:	a5 e0       	ldi	r26, 0x05	; 5
 3b8:	aa 95       	dec	r26
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <LCDInit+0x46>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 3bc:	0e 94 cc 00 	call	0x198	; 0x198 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 3c0:	80 2f       	mov	r24, r16
 3c2:	8c 60       	ori	r24, 0x0C	; 12
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 3ca:	88 e2       	ldi	r24, 0x28	; 40
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 3d2:	80 e4       	ldi	r24, 0x40	; 64
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>
 3da:	ce ec       	ldi	r28, 0xCE	; 206
 3dc:	d0 e0       	ldi	r29, 0x00	; 0
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
 3de:	0e e0       	ldi	r16, 0x0E	; 14
 3e0:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 3e2:	89 91       	ld	r24, Y+
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 3ea:	c0 17       	cp	r28, r16
 3ec:	d1 07       	cpc	r29, r17
 3ee:	c9 f7       	brne	.-14     	; 0x3e2 <LCDInit+0x70>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDGotoXY>

}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	08 95       	ret

00000402 <__divmodhi4>:
 402:	97 fb       	bst	r25, 7
 404:	09 2e       	mov	r0, r25
 406:	07 26       	eor	r0, r23
 408:	0a d0       	rcall	.+20     	; 0x41e <__divmodhi4_neg1>
 40a:	77 fd       	sbrc	r23, 7
 40c:	04 d0       	rcall	.+8      	; 0x416 <__divmodhi4_neg2>
 40e:	0c d0       	rcall	.+24     	; 0x428 <__udivmodhi4>
 410:	06 d0       	rcall	.+12     	; 0x41e <__divmodhi4_neg1>
 412:	00 20       	and	r0, r0
 414:	1a f4       	brpl	.+6      	; 0x41c <__divmodhi4_exit>

00000416 <__divmodhi4_neg2>:
 416:	70 95       	com	r23
 418:	61 95       	neg	r22
 41a:	7f 4f       	sbci	r23, 0xFF	; 255

0000041c <__divmodhi4_exit>:
 41c:	08 95       	ret

0000041e <__divmodhi4_neg1>:
 41e:	f6 f7       	brtc	.-4      	; 0x41c <__divmodhi4_exit>
 420:	90 95       	com	r25
 422:	81 95       	neg	r24
 424:	9f 4f       	sbci	r25, 0xFF	; 255
 426:	08 95       	ret

00000428 <__udivmodhi4>:
 428:	aa 1b       	sub	r26, r26
 42a:	bb 1b       	sub	r27, r27
 42c:	51 e1       	ldi	r21, 0x11	; 17
 42e:	07 c0       	rjmp	.+14     	; 0x43e <__udivmodhi4_ep>

00000430 <__udivmodhi4_loop>:
 430:	aa 1f       	adc	r26, r26
 432:	bb 1f       	adc	r27, r27
 434:	a6 17       	cp	r26, r22
 436:	b7 07       	cpc	r27, r23
 438:	10 f0       	brcs	.+4      	; 0x43e <__udivmodhi4_ep>
 43a:	a6 1b       	sub	r26, r22
 43c:	b7 0b       	sbc	r27, r23

0000043e <__udivmodhi4_ep>:
 43e:	88 1f       	adc	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	5a 95       	dec	r21
 444:	a9 f7       	brne	.-22     	; 0x430 <__udivmodhi4_loop>
 446:	80 95       	com	r24
 448:	90 95       	com	r25
 44a:	bc 01       	movw	r22, r24
 44c:	cd 01       	movw	r24, r26
 44e:	08 95       	ret

00000450 <_exit>:
 450:	f8 94       	cli

00000452 <__stop_program>:
 452:	ff cf       	rjmp	.-2      	; 0x452 <__stop_program>
