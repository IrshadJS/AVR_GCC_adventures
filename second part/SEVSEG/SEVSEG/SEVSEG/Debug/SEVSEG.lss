
SEVSEG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000035  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001ac  00000000  00000000  00000935  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014a  00000000  00000000  00000ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ca  00000000  00000000  00000c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000110  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c2  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 81 00 	call	0x102	; 0x102 <main>
  64:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SevenSegment>:
the decimal point is displayed if dp=1

Note:
n must be less than 9
*/
   if(n<10)
  6c:	8a 30       	cpi	r24, 0x0A	; 10
  6e:	e0 f5       	brcc	.+120    	; 0xe8 <SevenSegment+0x7c>
   {
      switch (n)
  70:	84 30       	cpi	r24, 0x04	; 4
  72:	29 f1       	breq	.+74     	; 0xbe <SevenSegment+0x52>
  74:	85 30       	cpi	r24, 0x05	; 5
  76:	48 f4       	brcc	.+18     	; 0x8a <SevenSegment+0x1e>
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	c1 f0       	breq	.+48     	; 0xac <SevenSegment+0x40>
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	98 f0       	brcs	.+38     	; 0xa6 <SevenSegment+0x3a>
  80:	82 30       	cpi	r24, 0x02	; 2
  82:	b9 f0       	breq	.+46     	; 0xb2 <SevenSegment+0x46>
  84:	83 30       	cpi	r24, 0x03	; 3
  86:	61 f5       	brne	.+88     	; 0xe0 <SevenSegment+0x74>
  88:	17 c0       	rjmp	.+46     	; 0xb8 <SevenSegment+0x4c>
  8a:	87 30       	cpi	r24, 0x07	; 7
  8c:	09 f1       	breq	.+66     	; 0xd0 <SevenSegment+0x64>
  8e:	88 30       	cpi	r24, 0x08	; 8
  90:	28 f4       	brcc	.+10     	; 0x9c <SevenSegment+0x30>
  92:	85 30       	cpi	r24, 0x05	; 5
  94:	b9 f0       	breq	.+46     	; 0xc4 <SevenSegment+0x58>
  96:	86 30       	cpi	r24, 0x06	; 6
  98:	19 f5       	brne	.+70     	; 0xe0 <SevenSegment+0x74>
  9a:	17 c0       	rjmp	.+46     	; 0xca <SevenSegment+0x5e>
  9c:	88 30       	cpi	r24, 0x08	; 8
  9e:	d9 f0       	breq	.+54     	; 0xd6 <SevenSegment+0x6a>
  a0:	89 30       	cpi	r24, 0x09	; 9
  a2:	f1 f4       	brne	.+60     	; 0xe0 <SevenSegment+0x74>
  a4:	1b c0       	rjmp	.+54     	; 0xdc <SevenSegment+0x70>
      {
         case 0:
         SEVEN_SEGMENT_PORT=0b00000011;
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	82 bb       	out	0x12, r24	; 18
         break;
  aa:	1a c0       	rjmp	.+52     	; 0xe0 <SevenSegment+0x74>

         case 1:
         SEVEN_SEGMENT_PORT=0b10011111;
  ac:	8f e9       	ldi	r24, 0x9F	; 159
  ae:	82 bb       	out	0x12, r24	; 18
         break;
  b0:	17 c0       	rjmp	.+46     	; 0xe0 <SevenSegment+0x74>

         case 2:
         SEVEN_SEGMENT_PORT=0b00100101;
  b2:	85 e2       	ldi	r24, 0x25	; 37
  b4:	82 bb       	out	0x12, r24	; 18
         break;
  b6:	14 c0       	rjmp	.+40     	; 0xe0 <SevenSegment+0x74>

         case 3:
         SEVEN_SEGMENT_PORT=0b00001101;
  b8:	8d e0       	ldi	r24, 0x0D	; 13
  ba:	82 bb       	out	0x12, r24	; 18
         break;
  bc:	11 c0       	rjmp	.+34     	; 0xe0 <SevenSegment+0x74>

         case 4:
         SEVEN_SEGMENT_PORT=0b10011001;
  be:	89 e9       	ldi	r24, 0x99	; 153
  c0:	82 bb       	out	0x12, r24	; 18
         break;
  c2:	0e c0       	rjmp	.+28     	; 0xe0 <SevenSegment+0x74>

         case 5:
         SEVEN_SEGMENT_PORT=0b01001001;
  c4:	89 e4       	ldi	r24, 0x49	; 73
  c6:	82 bb       	out	0x12, r24	; 18
         break;
  c8:	0b c0       	rjmp	.+22     	; 0xe0 <SevenSegment+0x74>

         case 6:
         SEVEN_SEGMENT_PORT=0b01000001;
  ca:	81 e4       	ldi	r24, 0x41	; 65
  cc:	82 bb       	out	0x12, r24	; 18
         break;
  ce:	08 c0       	rjmp	.+16     	; 0xe0 <SevenSegment+0x74>

         case 7:
         SEVEN_SEGMENT_PORT=0b00011111;
  d0:	8f e1       	ldi	r24, 0x1F	; 31
  d2:	82 bb       	out	0x12, r24	; 18
         break;
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <SevenSegment+0x74>

         case 8:
         SEVEN_SEGMENT_PORT=0b00000001;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	82 bb       	out	0x12, r24	; 18
         break;
  da:	02 c0       	rjmp	.+4      	; 0xe0 <SevenSegment+0x74>

         case 9:
         SEVEN_SEGMENT_PORT=0b00001001;
  dc:	89 e0       	ldi	r24, 0x09	; 9
  de:	82 bb       	out	0x12, r24	; 18
         break;
      }
      if(dp)
  e0:	66 23       	and	r22, r22
  e2:	21 f0       	breq	.+8      	; 0xec <SevenSegment+0x80>
      {
         //if decimal point should be displayed

         //make 0th bit Low
         SEVEN_SEGMENT_PORT&=0b11111110;
  e4:	90 98       	cbi	0x12, 0	; 18
  e6:	08 95       	ret
   else
   {
      //This symbol on display tells that n was greater than 9
      //so display can't handle it

      SEVEN_SEGMENT_PORT=0b11111101;
  e8:	8d ef       	ldi	r24, 0xFD	; 253
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	08 95       	ret

000000ee <Wait>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	9f ef       	ldi	r25, 0xFF	; 255
  f2:	ac e2       	ldi	r26, 0x2C	; 44
  f4:	81 50       	subi	r24, 0x01	; 1
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	a0 40       	sbci	r26, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <Wait+0x6>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <Wait+0x10>
  fe:	00 00       	nop
   for(i=0;i<59;i++)
   {
      _delay_loop_2(0);
   } */
_delay_ms(1000);
}
 100:	08 95       	ret

00000102 <main>:


void main()
{
 102:	1f 93       	push	r17
   //Setup
   SEVEN_SEGMENT_DDR=0xFF;    //All output
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	81 bb       	out	0x11, r24	; 17
   SEVEN_SEGMENT_PORT=0xFF;   //All segments off
 108:	82 bb       	out	0x12, r24	; 18

   uint8_t count=0;

   while(1)
   {
      SevenSegment(count,0);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	0e 94 36 00 	call	0x6c	; 0x6c <SevenSegment>

      count++;
 112:	11 e0       	ldi	r17, 0x01	; 1
 114:	01 c0       	rjmp	.+2      	; 0x118 <main+0x16>
      if(count==10)
      {
         count=0;
 116:	10 e0       	ldi	r17, 0x00	; 0
      }

      Wait();
 118:	0e 94 77 00 	call	0xee	; 0xee <Wait>

   uint8_t count=0;

   while(1)
   {
      SevenSegment(count,0);
 11c:	81 2f       	mov	r24, r17
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	0e 94 36 00 	call	0x6c	; 0x6c <SevenSegment>

      count++;
 124:	1f 5f       	subi	r17, 0xFF	; 255
      if(count==10)
 126:	1a 30       	cpi	r17, 0x0A	; 10
 128:	b9 f7       	brne	.-18     	; 0x118 <main+0x16>
 12a:	f5 cf       	rjmp	.-22     	; 0x116 <main+0x14>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
