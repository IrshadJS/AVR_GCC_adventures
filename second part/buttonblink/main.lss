
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001ab  00000000  00000000  000001a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000104  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b2  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e0  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000100  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include<util/delay.h>

void main(void)

{
  6c:	1f 93       	push	r17
  6e:	cf 93       	push	r28
  70:	df 93       	push	r29

DDRB |= 1<<7 | 1 <<6;
  72:	87 b3       	in	r24, 0x17	; 23
  74:	80 6c       	ori	r24, 0xC0	; 192
  76:	87 bb       	out	0x17, r24	; 23

DDRB &= ~(1<<0);
  78:	b8 98       	cbi	0x17, 0	; 23

PORTB |= 1<<0;PORTB ^= 1<<7;
  7a:	c0 9a       	sbi	0x18, 0	; 24
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	80 58       	subi	r24, 0x80	; 128
  80:	88 bb       	out	0x18, r24	; 24
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	70 e0       	ldi	r23, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  92:	c0 e7       	ldi	r28, 0x70	; 112
  94:	d1 e0       	ldi	r29, 0x01	; 1
 for(int i=0;i<6;i++)
 
 {
   _delay_ms(1000);
   
    PORTB ^= 1<<7 | 1<<6;
  96:	10 ec       	ldi	r17, 0xC0	; 192
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x32>

DDRB |= 1<<7 | 1 <<6;

DDRB &= ~(1<<0);

PORTB |= 1<<0;PORTB ^= 1<<7;
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0

for(;;)

{

if(bit_is_clear(PINB,0))
  9e:	b0 99       	sbic	0x16, 0	; 22
  a0:	0e c0       	rjmp	.+28     	; 0xbe <main+0x52>

{

pressed_confidence++;
  a2:	6f 5f       	subi	r22, 0xFF	; 255
  a4:	7f 4f       	sbci	r23, 0xFF	; 255

if(pressed_confidence > 400)
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	61 39       	cpi	r22, 0x91	; 145
  aa:	72 07       	cpc	r23, r18
  ac:	ac f0       	brlt	.+42     	; 0xd8 <main+0x6c>

{

if(pressed == 0)
  ae:	10 97       	sbiw	r26, 0x00	; 0
  b0:	99 f4       	brne	.+38     	; 0xd8 <main+0x6c>

pressed =1;

pressed_confidence = 0;

count++;
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	a1 e0       	ldi	r26, 0x01	; 1
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	0d c0       	rjmp	.+26     	; 0xd8 <main+0x6c>

else 

{

released_confidence++;
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255

if(released_confidence >400)
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	41 39       	cpi	r20, 0x91	; 145
  c6:	52 07       	cpc	r21, r18
  c8:	3c f0       	brlt	.+14     	; 0xd8 <main+0x6c>

{

if( pressed ==1 )
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b1 05       	cpc	r27, r1
  ce:	21 f4       	brne	.+8      	; 0xd8 <main+0x6c>
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0

}

}

if(count >= 5)
  d8:	85 30       	cpi	r24, 0x05	; 5
  da:	91 05       	cpc	r25, r1
  dc:	04 f3       	brlt	.-64     	; 0x9e <main+0x32>
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	14 c0       	rjmp	.+40     	; 0x10c <main+0xa0>
  e4:	fe 01       	movw	r30, r28
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x7a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d9 f7       	brne	.-10     	; 0xe4 <main+0x78>
 for(int i=0;i<6;i++)
 
 {
   _delay_ms(1000);
   
    PORTB ^= 1<<7 | 1<<6;
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	81 27       	eor	r24, r17
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	97 e2       	ldi	r25, 0x27	; 39
  f8:	fe 01       	movw	r30, r28
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 100:	d9 f7       	brne	.-10     	; 0xf8 <main+0x8c>

if(count >= 5)

{

 for(int i=0;i<6;i++)
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	26 30       	cpi	r18, 0x06	; 6
 108:	31 05       	cpc	r19, r1
 10a:	39 f2       	breq	.-114    	; 0x9a <main+0x2e>
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	97 e2       	ldi	r25, 0x27	; 39
 110:	e9 cf       	rjmp	.-46     	; 0xe4 <main+0x78>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
