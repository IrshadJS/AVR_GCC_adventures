
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000004e  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000107  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000a3  00000000  00000000  000009d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000185  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000c04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000cb  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <usartinit>:
#include <inttypes.h>

void usartinit(uint16_t ubrrval)
{
	
	UBRRL = ubrrval;
  6c:	89 b9       	out	0x09, r24	; 9
	UBRRH = ubrrval >> 8;
  6e:	90 bd       	out	0x20, r25	; 32
	
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  70:	86 e8       	ldi	r24, 0x86	; 134
  72:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1<<TXEN)|(1<<RXEN);
  74:	88 e1       	ldi	r24, 0x18	; 24
  76:	8a b9       	out	0x0a, r24	; 10
	
}
  78:	08 95       	ret

0000007a <usartreadchar>:

int usartreadchar()
{
	
	while(!(UCSRA&(1<<RXC)))
  7a:	5f 9b       	sbis	0x0b, 7	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <usartreadchar>
	{
	}
	return UDR;		
  7e:	8c b1       	in	r24, 0x0c	; 12
	}
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	08 95       	ret

00000084 <usartwritechar>:


void usartwritechar(char data)
{
	while(!(UCSRA&(1<<UDRE)))
  84:	5d 9b       	sbis	0x0b, 5	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <usartwritechar>
	{
	}		
	UDR=data;
  88:	8c b9       	out	0x0c, r24	; 12
	
}
  8a:	08 95       	ret

0000008c <main>:
void main()
{
  8c:	1f 93       	push	r17
	char data;
	
	usartinit(47);
  8e:	8f e2       	ldi	r24, 0x2F	; 47
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 36 00 	call	0x6c	; 0x6c <usartinit>
	
    while(1)
    {
        data=usartreadchar();
  96:	0e 94 3d 00 	call	0x7a	; 0x7a <usartreadchar>
  9a:	18 2f       	mov	r17, r24
		usartwritechar('[');
  9c:	8b e5       	ldi	r24, 0x5B	; 91
  9e:	0e 94 42 00 	call	0x84	; 0x84 <usartwritechar>
		usartwritechar(data);
  a2:	81 2f       	mov	r24, r17
  a4:	0e 94 42 00 	call	0x84	; 0x84 <usartwritechar>
		usartwritechar(']');
  a8:	8d e5       	ldi	r24, 0x5D	; 93
  aa:	0e 94 42 00 	call	0x84	; 0x84 <usartwritechar>
  ae:	f3 cf       	rjmp	.-26     	; 0x96 <main+0xa>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
