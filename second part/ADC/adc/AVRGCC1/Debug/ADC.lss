
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000003b4  00000428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000009a  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000808  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000269  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d1  00000000  00000000  00001717  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000018e  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000283  00000000  00000000  00002016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000006e  00000000  00000000  00002299  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include "lcd.h"

int main(void)
{
	LCDInit(LS_BLINK|LS_ULINE);
  82:	83 e0       	ldi	r24, 0x03	; 3
  84:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCDInit>
	
	LCDWriteStringXY(1,1,"x=");
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCDGotoXY>
  90:	80 e6       	ldi	r24, 0x60	; 96
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDWriteString>
	
	LCDWriteStringXY(2,1,"y=");
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCDGotoXY>
  a0:	83 e6       	ldi	r24, 0x63	; 99
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDWriteString>
	
	ADMUX |= 1<<REFS0 | 1<<ADLAR ;          /* selects the AVCC and with adlar 1 the adc result bytes are shifted with all bits in 
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	80 66       	ori	r24, 0x60	; 96
  ac:	87 b9       	out	0x07, r24	; 7
							                   ADC (result) as left adjusted */
	
	ADCSRA |=1<<ADEN | 1<< ADIF |1<<ADIE |1<<ADSC ; /* ADC enabled|ADC interrupt flag register is set |ADC interrupt enable register 
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	88 6d       	ori	r24, 0xD8	; 216
  b2:	86 b9       	out	0x06, r24	; 6
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x32>

000000b6 <ISR>:

ISR (ADC_vect)
{
	//char LCDstring[4];
	
	switch (ADMUX)
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	80 3c       	cpi	r24, 0xC0	; 192
  ba:	19 f0       	breq	.+6      	; 0xc2 <ISR+0xc>
  bc:	81 3c       	cpi	r24, 0xC1	; 193
  be:	d1 f4       	brne	.+52     	; 0xf4 <ISR+0x3e>
  c0:	0d c0       	rjmp	.+26     	; 0xdc <ISR+0x26>
	{
		case 0xc0 :
		LCDWriteIntXY(1,4,ADC,4);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	64 e0       	ldi	r22, 0x04	; 4
  c6:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCDGotoXY>
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCDWriteInt>
		ADMUX=0xc1;
  d6:	81 ec       	ldi	r24, 0xC1	; 193
  d8:	87 b9       	out	0x07, r24	; 7
		break;
  da:	0c c0       	rjmp	.+24     	; 0xf4 <ISR+0x3e>
		
		case 0xc1 :
		LCDWriteIntXY(2,4,ADC,4);
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	64 e0       	ldi	r22, 0x04	; 4
  e0:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCDGotoXY>
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	64 e0       	ldi	r22, 0x04	; 4
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCDWriteInt>
		ADMUX=0xc0;
  f0:	80 ec       	ldi	r24, 0xC0	; 192
  f2:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	ADCSRA |= 1<<ADSC;
  f4:	36 9a       	sbi	0x06, 6	; 6
  f6:	08 95       	ret

000000f8 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  f8:	87 b3       	in	r24, 0x17	; 23
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
  fe:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
 100:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <LCDBusyLoop+0xc>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCDBusyLoop+0x12>

	
	do
	{

		SET_E();
 10a:	c4 9a       	sbi	0x18, 4	; 24
 10c:	92 e0       	ldi	r25, 0x02	; 2
 10e:	9a 95       	dec	r25
 110:	f1 f7       	brne	.-4      	; 0x10e <LCDBusyLoop+0x16>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 114:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 116:	82 95       	swap	r24
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	92 e0       	ldi	r25, 0x02	; 2
 11c:	9a 95       	dec	r25
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCDBusyLoop+0x24>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCDBusyLoop+0x2a>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 122:	c4 98       	cbi	0x18, 4	; 24
 124:	95 e0       	ldi	r25, 0x05	; 5
 126:	9a 95       	dec	r25
 128:	f1 f7       	brne	.-4      	; 0x126 <LCDBusyLoop+0x2e>
		_delay_us(1);	//tEL

		SET_E();
 12a:	c4 9a       	sbi	0x18, 4	; 24
 12c:	92 e0       	ldi	r25, 0x02	; 2
 12e:	9a 95       	dec	r25
 130:	f1 f7       	brne	.-4      	; 0x12e <LCDBusyLoop+0x36>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCDBusyLoop+0x3c>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 134:	96 b3       	in	r25, 0x16	; 22
 136:	92 e0       	ldi	r25, 0x02	; 2
 138:	9a 95       	dec	r25
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDBusyLoop+0x40>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDBusyLoop+0x46>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 13e:	c4 98       	cbi	0x18, 4	; 24
 140:	95 e0       	ldi	r25, 0x05	; 5
 142:	9a 95       	dec	r25
 144:	f1 f7       	brne	.-4      	; 0x142 <LCDBusyLoop+0x4a>
		_delay_us(1);	//tEL
	}while(busy);
 146:	88 23       	and	r24, r24
 148:	04 f3       	brlt	.-64     	; 0x10a <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 14a:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 14c:	87 b3       	in	r24, 0x17	; 23
 14e:	8f 60       	ori	r24, 0x0F	; 15
 150:	87 bb       	out	0x17, r24	; 23

}
 152:	08 95       	ret

00000154 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 154:	28 2f       	mov	r18, r24
 156:	22 95       	swap	r18
 158:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 15a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 15c:	66 23       	and	r22, r22
 15e:	11 f4       	brne	.+4      	; 0x164 <LCDByte+0x10>
	CLEAR_RS();
 160:	93 98       	cbi	0x12, 3	; 18
 162:	01 c0       	rjmp	.+2      	; 0x166 <LCDByte+0x12>
else
	SET_RS();
 164:	93 9a       	sbi	0x12, 3	; 18
 166:	92 e0       	ldi	r25, 0x02	; 2
 168:	9a 95       	dec	r25
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDByte+0x14>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCDByte+0x1a>

_delay_us(0.500);		//tAS

SET_E();
 16e:	c4 9a       	sbi	0x18, 4	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 170:	98 b3       	in	r25, 0x18	; 24
 172:	90 7f       	andi	r25, 0xF0	; 240
 174:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 176:	98 bb       	out	0x18, r25	; 24
 178:	95 e0       	ldi	r25, 0x05	; 5
 17a:	9a 95       	dec	r25
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 17e:	c4 98       	cbi	0x18, 4	; 24
 180:	95 e0       	ldi	r25, 0x05	; 5
 182:	9a 95       	dec	r25
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 186:	c4 9a       	sbi	0x18, 4	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 188:	98 b3       	in	r25, 0x18	; 24
 18a:	90 7f       	andi	r25, 0xF0	; 240
 18c:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 18e:	88 bb       	out	0x18, r24	; 24
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <LCDByte+0x3e>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 196:	c4 98       	cbi	0x18, 4	; 24
 198:	95 e0       	ldi	r25, 0x05	; 5
 19a:	9a 95       	dec	r25
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 19e:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCDBusyLoop>
}
 1a2:	08 95       	ret

000001a4 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 1aa:	88 81       	ld	r24, Y
 1ac:	88 23       	and	r24, r24
 1ae:	d9 f0       	breq	.+54     	; 0x1e6 <LCDWriteString+0x42>
 {
 	//Custom Char Support
	if(*msg=='%')
 1b0:	85 32       	cpi	r24, 0x25	; 37
 1b2:	91 f4       	brne	.+36     	; 0x1d8 <LCDWriteString+0x34>
	{
		msg++;
 1b4:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 1b6:	88 81       	ld	r24, Y
 1b8:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 1ba:	88 30       	cpi	r24, 0x08	; 8
 1bc:	20 f4       	brcc	.+8      	; 0x1c6 <LCDWriteString+0x22>
		{
			LCDData(cc);
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
 1c4:	0c c0       	rjmp	.+24     	; 0x1de <LCDWriteString+0x3a>
		}
		else
		{
			LCDData('%');
 1c6:	85 e2       	ldi	r24, 0x25	; 37
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
			LCDData(*msg);
 1ce:	88 81       	ld	r24, Y
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <LCDWriteString+0x3a>
		}
	}
	else
	{
		LCDData(*msg);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
	}
	msg++;
 1de:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 1e0:	88 81       	ld	r24, Y
 1e2:	88 23       	and	r24, r24
 1e4:	29 f7       	brne	.-54     	; 0x1b0 <LCDWriteString+0xc>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	df 93       	push	r29
 1f6:	cf 93       	push	r28
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <LCDWriteInt+0xe>
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <LCDWriteInt+0x10>
 1fc:	0f 92       	push	r0
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 204:	fe 01       	movw	r30, r28
 206:	31 96       	adiw	r30, 0x01	; 1
 208:	25 e0       	ldi	r18, 0x05	; 5
 20a:	df 01       	movw	r26, r30
 20c:	1d 92       	st	X+, r1
 20e:	2a 95       	dec	r18
 210:	e9 f7       	brne	.-6      	; 0x20c <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	61 f0       	breq	.+24     	; 0x22e <LCDWriteInt+0x42>
 216:	fe 01       	movw	r30, r28
 218:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
 21a:	2a e0       	ldi	r18, 0x0A	; 10
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	b9 01       	movw	r22, r18
 220:	0e 94 b1 01 	call	0x362	; 0x362 <__divmodhi4>
 224:	82 93       	st	-Z, r24
	val=val/10;
 226:	86 2f       	mov	r24, r22
 228:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	c1 f7       	brne	.-16     	; 0x21e <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 22e:	bf ef       	ldi	r27, 0xFF	; 255
 230:	eb 16       	cp	r14, r27
 232:	bf ef       	ldi	r27, 0xFF	; 255
 234:	fb 06       	cpc	r15, r27
 236:	69 f4       	brne	.+26     	; 0x252 <LCDWriteInt+0x66>
		while(str[j]==0) j++;
 238:	29 81       	ldd	r18, Y+1	; 0x01
 23a:	22 23       	and	r18, r18
 23c:	79 f4       	brne	.+30     	; 0x25c <LCDWriteInt+0x70>
 23e:	fe 01       	movw	r30, r28
 240:	32 96       	adiw	r30, 0x02	; 2
 242:	00 e0       	ldi	r16, 0x00	; 0
 244:	10 e0       	ldi	r17, 0x00	; 0
 246:	0f 5f       	subi	r16, 0xFF	; 255
 248:	1f 4f       	sbci	r17, 0xFF	; 255
 24a:	21 91       	ld	r18, Z+
 24c:	22 23       	and	r18, r18
 24e:	d9 f3       	breq	.-10     	; 0x246 <LCDWriteInt+0x5a>
 250:	07 c0       	rjmp	.+14     	; 0x260 <LCDWriteInt+0x74>
	else
		j=5-field_length;
 252:	05 e0       	ldi	r16, 0x05	; 5
 254:	10 e0       	ldi	r17, 0x00	; 0
 256:	0e 19       	sub	r16, r14
 258:	1f 09       	sbc	r17, r15
 25a:	02 c0       	rjmp	.+4      	; 0x260 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 25c:	00 e0       	ldi	r16, 0x00	; 0
 25e:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
 260:	99 23       	and	r25, r25
 262:	24 f4       	brge	.+8      	; 0x26c <LCDWriteInt+0x80>
 264:	8d e2       	ldi	r24, 0x2D	; 45
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
	for(i=j;i<5;i++)
 26c:	05 30       	cpi	r16, 0x05	; 5
 26e:	11 05       	cpc	r17, r1
 270:	94 f4       	brge	.+36     	; 0x296 <LCDWriteInt+0xaa>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 272:	7e 01       	movw	r14, r28
 274:	08 94       	sec
 276:	e1 1c       	adc	r14, r1
 278:	f1 1c       	adc	r15, r1
 27a:	e0 0e       	add	r14, r16
 27c:	f1 1e       	adc	r15, r17
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 27e:	f7 01       	movw	r30, r14
 280:	81 91       	ld	r24, Z+
 282:	7f 01       	movw	r14, r30
 284:	80 5d       	subi	r24, 0xD0	; 208
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 28c:	0f 5f       	subi	r16, 0xFF	; 255
 28e:	1f 4f       	sbci	r17, 0xFF	; 255
 290:	05 30       	cpi	r16, 0x05	; 5
 292:	11 05       	cpc	r17, r1
 294:	a4 f3       	brlt	.-24     	; 0x27e <LCDWriteInt+0x92>
	{
	LCDData(48+str[i]);
	}
}
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	cf 91       	pop	r28
 2a2:	df 91       	pop	r29
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	08 95       	ret

000002ae <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 2ae:	84 31       	cpi	r24, 0x14	; 20
 2b0:	78 f4       	brcc	.+30     	; 0x2d0 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 2b2:	62 30       	cpi	r22, 0x02	; 2
 2b4:	31 f0       	breq	.+12     	; 0x2c2 <LCDGotoXY+0x14>
 2b6:	63 30       	cpi	r22, 0x03	; 3
 2b8:	31 f0       	breq	.+12     	; 0x2c6 <LCDGotoXY+0x18>
 2ba:	61 30       	cpi	r22, 0x01	; 1
 2bc:	29 f4       	brne	.+10     	; 0x2c8 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 2be:	80 64       	ori	r24, 0x40	; 64
			break;
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 2c2:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 2c6:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
 2d0:	08 95       	ret

000002d2 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	08 2f       	mov	r16, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	89 e9       	ldi	r24, 0x99	; 153
 2de:	99 e5       	ldi	r25, 0x59	; 89
 2e0:	a1 e0       	ldi	r26, 0x01	; 1
 2e2:	81 50       	subi	r24, 0x01	; 1
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	a0 40       	sbci	r26, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <LCDInit+0x10>
 2ea:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 2ec:	87 b3       	in	r24, 0x17	; 23
 2ee:	8f 60       	ori	r24, 0x0F	; 15
 2f0:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 2f2:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 2f4:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 2f6:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 2f8:	88 b3       	in	r24, 0x18	; 24
 2fa:	80 7f       	andi	r24, 0xF0	; 240
 2fc:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 2fe:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 300:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 302:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCDInit+0x34>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCDInit+0x36>
 308:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 30a:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 30c:	c1 9a       	sbi	0x18, 1	; 24
 30e:	95 e0       	ldi	r25, 0x05	; 5
 310:	9a 95       	dec	r25
 312:	f1 f7       	brne	.-4      	; 0x310 <LCDInit+0x3e>
	_delay_us(1);
	CLEAR_E();
 314:	c4 98       	cbi	0x18, 4	; 24
 316:	a5 e0       	ldi	r26, 0x05	; 5
 318:	aa 95       	dec	r26
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCDInit+0x46>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 31c:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 320:	80 2f       	mov	r24, r16
 322:	8c 60       	ori	r24, 0x0C	; 12
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 32a:	88 e2       	ldi	r24, 0x28	; 40
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 332:	80 e4       	ldi	r24, 0x40	; 64
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
 33a:	c6 e6       	ldi	r28, 0x66	; 102
 33c:	d0 e0       	ldi	r29, 0x00	; 0
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
 33e:	06 ea       	ldi	r16, 0xA6	; 166
 340:	10 e0       	ldi	r17, 0x00	; 0
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 342:	89 91       	ld	r24, Y+
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 34a:	c0 17       	cp	r28, r16
 34c:	d1 07       	cpc	r29, r17
 34e:	c9 f7       	brne	.-14     	; 0x342 <LCDInit+0x70>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCDGotoXY>

}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	08 95       	ret

00000362 <__divmodhi4>:
 362:	97 fb       	bst	r25, 7
 364:	09 2e       	mov	r0, r25
 366:	07 26       	eor	r0, r23
 368:	0a d0       	rcall	.+20     	; 0x37e <__divmodhi4_neg1>
 36a:	77 fd       	sbrc	r23, 7
 36c:	04 d0       	rcall	.+8      	; 0x376 <__divmodhi4_neg2>
 36e:	0c d0       	rcall	.+24     	; 0x388 <__udivmodhi4>
 370:	06 d0       	rcall	.+12     	; 0x37e <__divmodhi4_neg1>
 372:	00 20       	and	r0, r0
 374:	1a f4       	brpl	.+6      	; 0x37c <__divmodhi4_exit>

00000376 <__divmodhi4_neg2>:
 376:	70 95       	com	r23
 378:	61 95       	neg	r22
 37a:	7f 4f       	sbci	r23, 0xFF	; 255

0000037c <__divmodhi4_exit>:
 37c:	08 95       	ret

0000037e <__divmodhi4_neg1>:
 37e:	f6 f7       	brtc	.-4      	; 0x37c <__divmodhi4_exit>
 380:	90 95       	com	r25
 382:	81 95       	neg	r24
 384:	9f 4f       	sbci	r25, 0xFF	; 255
 386:	08 95       	ret

00000388 <__udivmodhi4>:
 388:	aa 1b       	sub	r26, r26
 38a:	bb 1b       	sub	r27, r27
 38c:	51 e1       	ldi	r21, 0x11	; 17
 38e:	07 c0       	rjmp	.+14     	; 0x39e <__udivmodhi4_ep>

00000390 <__udivmodhi4_loop>:
 390:	aa 1f       	adc	r26, r26
 392:	bb 1f       	adc	r27, r27
 394:	a6 17       	cp	r26, r22
 396:	b7 07       	cpc	r27, r23
 398:	10 f0       	brcs	.+4      	; 0x39e <__udivmodhi4_ep>
 39a:	a6 1b       	sub	r26, r22
 39c:	b7 0b       	sbc	r27, r23

0000039e <__udivmodhi4_ep>:
 39e:	88 1f       	adc	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	5a 95       	dec	r21
 3a4:	a9 f7       	brne	.-22     	; 0x390 <__udivmodhi4_loop>
 3a6:	80 95       	com	r24
 3a8:	90 95       	com	r25
 3aa:	bc 01       	movw	r22, r24
 3ac:	cd 01       	movw	r24, r26
 3ae:	08 95       	ret

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
