
sevsegmul2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000002e2  2**0
                  ALLOC
  2 .stab         000009a8  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000024b  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000003e  00000000  00000000  00000ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000027c  00000000  00000000  00000f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b4  00000000  00000000  000011b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036e  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000114  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ee  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00001a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  74:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <display>:
 
}
 
void display (uint16_t num) // FUNCTION TO DISPLAY VALUES ON SSD
{
    DDRB=0b11111111;
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	27 bb       	out	0x17, r18	; 23
    PORTB=0xFF;
  80:	28 bb       	out	0x18, r18	; 24
    switch(num)
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	91 05       	cpc	r25, r1
  86:	81 f1       	breq	.+96     	; 0xe8 <display+0x6c>
  88:	85 30       	cpi	r24, 0x05	; 5
  8a:	91 05       	cpc	r25, r1
  8c:	68 f4       	brcc	.+26     	; 0xa8 <display+0x2c>
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	91 05       	cpc	r25, r1
  92:	09 f1       	breq	.+66     	; 0xd6 <display+0x5a>
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	91 05       	cpc	r25, r1
  98:	d8 f0       	brcs	.+54     	; 0xd0 <display+0x54>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	91 05       	cpc	r25, r1
  9e:	f1 f0       	breq	.+60     	; 0xdc <display+0x60>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	91 05       	cpc	r25, r1
  a4:	99 f5       	brne	.+102    	; 0x10c <display+0x90>
  a6:	1d c0       	rjmp	.+58     	; 0xe2 <display+0x66>
  a8:	87 30       	cpi	r24, 0x07	; 7
  aa:	91 05       	cpc	r25, r1
  ac:	31 f1       	breq	.+76     	; 0xfa <display+0x7e>
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	91 05       	cpc	r25, r1
  b2:	38 f4       	brcc	.+14     	; 0xc2 <display+0x46>
  b4:	85 30       	cpi	r24, 0x05	; 5
  b6:	91 05       	cpc	r25, r1
  b8:	d1 f0       	breq	.+52     	; 0xee <display+0x72>
  ba:	86 30       	cpi	r24, 0x06	; 6
  bc:	91 05       	cpc	r25, r1
  be:	31 f5       	brne	.+76     	; 0x10c <display+0x90>
  c0:	19 c0       	rjmp	.+50     	; 0xf4 <display+0x78>
  c2:	88 30       	cpi	r24, 0x08	; 8
  c4:	91 05       	cpc	r25, r1
  c6:	e1 f0       	breq	.+56     	; 0x100 <display+0x84>
  c8:	89 30       	cpi	r24, 0x09	; 9
  ca:	91 05       	cpc	r25, r1
  cc:	f9 f4       	brne	.+62     	; 0x10c <display+0x90>
  ce:	1b c0       	rjmp	.+54     	; 0x106 <display+0x8a>
    {
        case 0:
        PORTB=0b11011101;
  d0:	8d ed       	ldi	r24, 0xDD	; 221
  d2:	88 bb       	out	0x18, r24	; 24
        break;
  d4:	08 95       	ret
        case 1:
        PORTB=0b01010000;
  d6:	80 e5       	ldi	r24, 0x50	; 80
  d8:	88 bb       	out	0x18, r24	; 24
        break;
  da:	08 95       	ret
        case 2:
        PORTB=0b10011011;
  dc:	8b e9       	ldi	r24, 0x9B	; 155
  de:	88 bb       	out	0x18, r24	; 24
        break;
  e0:	08 95       	ret
        case 3:
        PORTB=0b11011010;
  e2:	8a ed       	ldi	r24, 0xDA	; 218
  e4:	88 bb       	out	0x18, r24	; 24
        break;
  e6:	08 95       	ret
        case 4:
        PORTB=0b01010110;
  e8:	86 e5       	ldi	r24, 0x56	; 86
  ea:	88 bb       	out	0x18, r24	; 24
        break;
  ec:	08 95       	ret
        case 5:
        PORTB=0b11001110;
  ee:	8e ec       	ldi	r24, 0xCE	; 206
  f0:	88 bb       	out	0x18, r24	; 24
        break;
  f2:	08 95       	ret
        case 6:
        PORTB=0b11001111;
  f4:	8f ec       	ldi	r24, 0xCF	; 207
  f6:	88 bb       	out	0x18, r24	; 24
        break;
  f8:	08 95       	ret
        case 7:
        PORTB=0b01011000;
  fa:	88 e5       	ldi	r24, 0x58	; 88
  fc:	88 bb       	out	0x18, r24	; 24
        break;
  fe:	08 95       	ret
        case 8:
        PORTB=0b11011111;
 100:	8f ed       	ldi	r24, 0xDF	; 223
 102:	88 bb       	out	0x18, r24	; 24
        break;
 104:	08 95       	ret
        case 9:
        PORTB=0b11011110;
 106:	8e ed       	ldi	r24, 0xDE	; 222
 108:	88 bb       	out	0x18, r24	; 24
        break;
 10a:	08 95       	ret
        default:
        PORTB=0xFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret

00000112 <breakup>:
#define F_CPU 14745600
 
volatile uint16_t digits[2]={0,0}; //INITIALIZE VARIABLE TO STORE INDIVIDUAL DIGITS OF THE NUMBER
 
void breakup(uint16_t num) //FUNCTION TO FIND THE INDIVIDUAL DIGITS OF THE NUMBER
{                            // AND STORE THEM IN A GLOBAL VARIABLE
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
    DDRD=0xFF; // INITIALIZE PORTD AS ALL OUTPUT
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	21 bb       	out	0x11, r18	; 17
    PORTD=0x00;
 11a:	12 ba       	out	0x12, r1	; 18
    unsigned int i=0;
    while (num!=0)
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	a9 f0       	breq	.+42     	; 0x14a <breakup+0x38>
 
void breakup(uint16_t num) //FUNCTION TO FIND THE INDIVIDUAL DIGITS OF THE NUMBER
{                            // AND STORE THEM IN A GLOBAL VARIABLE
    DDRD=0xFF; // INITIALIZE PORTD AS ALL OUTPUT
    PORTD=0x00;
    unsigned int i=0;
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
    while (num!=0)
    {
        digits[i]=num%10;
 124:	ea e0       	ldi	r30, 0x0A	; 10
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	bf 01       	movw	r22, r30
 12a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivmodhi4>
 12e:	d9 01       	movw	r26, r18
 130:	aa 0f       	add	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	a0 5a       	subi	r26, 0xA0	; 160
 136:	bf 4f       	sbci	r27, 0xFF	; 255
 138:	11 96       	adiw	r26, 0x01	; 1
 13a:	9c 93       	st	X, r25
 13c:	8e 93       	st	-X, r24
        num=num/10;
 13e:	86 2f       	mov	r24, r22
 140:	97 2f       	mov	r25, r23
        i++;
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
void breakup(uint16_t num) //FUNCTION TO FIND THE INDIVIDUAL DIGITS OF THE NUMBER
{                            // AND STORE THEM IN A GLOBAL VARIABLE
    DDRD=0xFF; // INITIALIZE PORTD AS ALL OUTPUT
    PORTD=0x00;
    unsigned int i=0;
    while (num!=0)
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	79 f7       	brne	.-34     	; 0x128 <breakup+0x16>
        num=num/10;
        i++;
    }
    for(i=0;i<2;i++)
    {
        PORTD=(1<<i); // 'i'th PORTD GIVEN HIGH
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	82 bb       	out	0x12, r24	; 18
        display(digits[i]);
 14e:	ce e3       	ldi	r28, 0x3E	; 62
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	80 91 60 00 	lds	r24, 0x0060
 156:	90 91 61 00 	lds	r25, 0x0061
 15a:	fe 01       	movw	r30, r28
 15c:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	97 e4       	ldi	r25, 0x47	; 71
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <breakup+0x50>
 166:	00 c0       	rjmp	.+0      	; 0x168 <breakup+0x56>
 168:	00 00       	nop
        _delay_ms(5);
        PORTD=(0<<i); //'i'th PORTD GIVEN LOW
 16a:	12 ba       	out	0x12, r1	; 18
        num=num/10;
        i++;
    }
    for(i=0;i<2;i++)
    {
        PORTD=(1<<i); // 'i'th PORTD GIVEN HIGH
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	82 bb       	out	0x12, r24	; 18
        display(digits[i]);
 170:	80 91 62 00 	lds	r24, 0x0062
 174:	90 91 63 00 	lds	r25, 0x0063
 178:	fe 01       	movw	r30, r28
 17a:	09 95       	icall
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	97 e4       	ldi	r25, 0x47	; 71
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <breakup+0x6e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <breakup+0x74>
 186:	00 00       	nop
        _delay_ms(5);
        PORTD=(0<<i); //'i'th PORTD GIVEN LOW
 188:	12 ba       	out	0x12, r1	; 18
    }
 
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <main>:
        PORTB=0xFF;
    }
}
 
int main(void)
{
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
    DDRB=0xFF; //INITIALIZE PORTB AS ALL OUTPUT
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	87 bb       	out	0x17, r24	; 23
    DDRC=0b11111110;   //PORTC0 DEFINED AS INPUT AND PORTD5 AS OUTPUT
 19c:	8e ef       	ldi	r24, 0xFE	; 254
 19e:	84 bb       	out	0x14, r24	; 20
    PORTC|=(1<<0); //enable internal pull-up resistors in PC0
 1a0:	a8 9a       	sbi	0x15, 0	; 21
        char x;
    uint16_t i, c=0,z=0;
        z=eeprom_read_word((uint16_t*)100); //read the value stored in the memory
 1a2:	84 e6       	ldi	r24, 0x64	; 100
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 08 01 	call	0x210	; 0x210 <__eerd_word_m32>
    c=z;
 1aa:	e8 2e       	mov	r14, r24
 1ac:	e7 01       	movw	r28, r14
 1ae:	7e 01       	movw	r14, r28
 1b0:	f9 2e       	mov	r15, r25
 1b2:	e7 01       	movw	r28, r14
    while(1)
        {
        x=PINC&0b00000001; //CHECK CONDITION OF INPUT '1' at PC0
 1b4:	83 b3       	in	r24, 0x13	; 19
            if (x==0)
 1b6:	80 fd       	sbrc	r24, 0
 1b8:	13 c0       	rjmp	.+38     	; 0x1e0 <main+0x50>
        {
               c++;
 1ba:	21 96       	adiw	r28, 0x01	; 1
               breakup(c); //PASS THE VALUE OF 'c' FOR DIGIT BREAKUP AND DISPLAY
 1bc:	ce 01       	movw	r24, r28
 1be:	0e 94 89 00 	call	0x112	; 0x112 <breakup>
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	9f e7       	ldi	r25, 0x7F	; 127
 1c6:	a4 e0       	ldi	r26, 0x04	; 4
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	a0 40       	sbci	r26, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x38>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x42>
 1d2:	00 00       	nop
               _delay_ms(100);
               eeprom_update_word((uint16_t*)100,c); //update memory
 1d4:	84 e6       	ldi	r24, 0x64	; 100
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	be 01       	movw	r22, r28
 1da:	0e 94 0e 01 	call	0x21c	; 0x21c <__eeupd_word_m32>
 1de:	ea cf       	rjmp	.-44     	; 0x1b4 <main+0x24>
        }
 
        else
        breakup(c);
 1e0:	ce 01       	movw	r24, r28
 1e2:	0e 94 89 00 	call	0x112	; 0x112 <breakup>
 1e6:	e6 cf       	rjmp	.-52     	; 0x1b4 <main+0x24>

000001e8 <__udivmodhi4>:
 1e8:	aa 1b       	sub	r26, r26
 1ea:	bb 1b       	sub	r27, r27
 1ec:	51 e1       	ldi	r21, 0x11	; 17
 1ee:	07 c0       	rjmp	.+14     	; 0x1fe <__udivmodhi4_ep>

000001f0 <__udivmodhi4_loop>:
 1f0:	aa 1f       	adc	r26, r26
 1f2:	bb 1f       	adc	r27, r27
 1f4:	a6 17       	cp	r26, r22
 1f6:	b7 07       	cpc	r27, r23
 1f8:	10 f0       	brcs	.+4      	; 0x1fe <__udivmodhi4_ep>
 1fa:	a6 1b       	sub	r26, r22
 1fc:	b7 0b       	sbc	r27, r23

000001fe <__udivmodhi4_ep>:
 1fe:	88 1f       	adc	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	5a 95       	dec	r21
 204:	a9 f7       	brne	.-22     	; 0x1f0 <__udivmodhi4_loop>
 206:	80 95       	com	r24
 208:	90 95       	com	r25
 20a:	bc 01       	movw	r22, r24
 20c:	cd 01       	movw	r24, r26
 20e:	08 95       	ret

00000210 <__eerd_word_m32>:
 210:	a8 e1       	ldi	r26, 0x18	; 24
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	42 e0       	ldi	r20, 0x02	; 2
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	0c 94 16 01 	jmp	0x22c	; 0x22c <__eerd_blraw_m32>

0000021c <__eeupd_word_m32>:
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	27 2f       	mov	r18, r23
 220:	0e 94 25 01 	call	0x24a	; 0x24a <__eeupd_r18_m32>
 224:	0c 94 24 01 	jmp	0x248	; 0x248 <__eeupd_byte_m32>

00000228 <__eerd_block_m32>:
 228:	dc 01       	movw	r26, r24
 22a:	cb 01       	movw	r24, r22

0000022c <__eerd_blraw_m32>:
 22c:	fc 01       	movw	r30, r24
 22e:	e1 99       	sbic	0x1c, 1	; 28
 230:	fe cf       	rjmp	.-4      	; 0x22e <__eerd_blraw_m32+0x2>
 232:	06 c0       	rjmp	.+12     	; 0x240 <__eerd_blraw_m32+0x14>
 234:	ff bb       	out	0x1f, r31	; 31
 236:	ee bb       	out	0x1e, r30	; 30
 238:	e0 9a       	sbi	0x1c, 0	; 28
 23a:	31 96       	adiw	r30, 0x01	; 1
 23c:	0d b2       	in	r0, 0x1d	; 29
 23e:	0d 92       	st	X+, r0
 240:	41 50       	subi	r20, 0x01	; 1
 242:	50 40       	sbci	r21, 0x00	; 0
 244:	b8 f7       	brcc	.-18     	; 0x234 <__eerd_blraw_m32+0x8>
 246:	08 95       	ret

00000248 <__eeupd_byte_m32>:
 248:	26 2f       	mov	r18, r22

0000024a <__eeupd_r18_m32>:
 24a:	e1 99       	sbic	0x1c, 1	; 28
 24c:	fe cf       	rjmp	.-4      	; 0x24a <__eeupd_r18_m32>
 24e:	9f bb       	out	0x1f, r25	; 31
 250:	8e bb       	out	0x1e, r24	; 30
 252:	e0 9a       	sbi	0x1c, 0	; 28
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	0d b2       	in	r0, 0x1d	; 29
 258:	02 16       	cp	r0, r18
 25a:	31 f0       	breq	.+12     	; 0x268 <__eeupd_r18_m32+0x1e>
 25c:	2d bb       	out	0x1d, r18	; 29
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	f8 94       	cli
 262:	e2 9a       	sbi	0x1c, 2	; 28
 264:	e1 9a       	sbi	0x1c, 1	; 28
 266:	0f be       	out	0x3f, r0	; 63
 268:	08 95       	ret

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
