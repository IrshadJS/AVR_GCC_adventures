
CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000025  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000019a  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000121  00000000  00000000  00000a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000103  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b8  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00000f93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <sleep>:
#include <avr/io.h>
#include <util/delay.h>

void sleep ( uint8_t ms ) 
{ 
    for ( ; ms> 0;ms -- ) _delay_ms ( 1 ) ;
  6c:	88 23       	and	r24, r24
  6e:	39 f0       	breq	.+14     	; 0x7e <sleep+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	e6 e6       	ldi	r30, 0x66	; 102
  72:	fe e0       	ldi	r31, 0x0E	; 14
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <sleep+0x8>
  78:	00 00       	nop
  7a:	81 50       	subi	r24, 0x01	; 1
  7c:	c9 f7       	brne	.-14     	; 0x70 <sleep+0x4>
  7e:	08 95       	ret

00000080 <main>:
 }
int main(void)
{
	int count = 0;
	int time1=0;
	TCCR1B |= 1<<WGM12 | 1<<CS12;
  80:	8e b5       	in	r24, 0x2e	; 46
  82:	8c 60       	ori	r24, 0x0C	; 12
  84:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 57600;
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	91 ee       	ldi	r25, 0xE1	; 225
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42
	DDRB |= 1<<7 | 1<<6;
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	80 6c       	ori	r24, 0xC0	; 192
  92:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<0);
  94:	b8 98       	cbi	0x17, 0	; 23
	PORTB ^= 1<<6;
  96:	98 b3       	in	r25, 0x18	; 24
  98:	80 e4       	ldi	r24, 0x40	; 64
  9a:	89 27       	eor	r24, r25
  9c:	88 bb       	out	0x18, r24	; 24
void sleep ( uint8_t ms ) 
{ 
    for ( ; ms> 0;ms -- ) _delay_ms ( 1 ) ;
 }
int main(void)
{
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
    while(1)
    {
		if(TIFR & 1<<OCF1A)
		{
			count++;
			TIFR = 1<<OCF1A;
  a2:	50 e1       	ldi	r21, 0x10	; 16
		}
		if(count>=5)
		{
			time1++;
			PORTB ^= 1<<6|1<<7;
  a4:	40 ec       	ldi	r20, 0xC0	; 192
void sleep ( uint8_t ms ) 
{ 
    for ( ; ms> 0;ms -- ) _delay_ms ( 1 ) ;
 }
int main(void)
{
  a6:	c9 01       	movw	r24, r18
	DDRB |= 1<<7 | 1<<6;
	DDRB &= ~(1<<0);
	PORTB ^= 1<<6;
    while(1)
    {
		if(TIFR & 1<<OCF1A)
  a8:	08 b6       	in	r0, 0x38	; 56
  aa:	04 fe       	sbrs	r0, 4
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <main+0x32>
		{
			count++;
  ae:	01 96       	adiw	r24, 0x01	; 1
			TIFR = 1<<OCF1A;
  b0:	58 bf       	out	0x38, r21	; 56
		}
		if(count>=5)
  b2:	85 30       	cpi	r24, 0x05	; 5
  b4:	91 05       	cpc	r25, r1
  b6:	c4 f3       	brlt	.-16     	; 0xa8 <main+0x28>
		{
			time1++;
			PORTB ^= 1<<6|1<<7;
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	84 27       	eor	r24, r20
  bc:	88 bb       	out	0x18, r24	; 24
  be:	f3 cf       	rjmp	.-26     	; 0xa6 <main+0x26>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
