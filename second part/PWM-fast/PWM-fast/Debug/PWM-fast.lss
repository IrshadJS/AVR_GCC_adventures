
PWM-fast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000004b  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001da  00000000  00000000  000008f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000160  00000000  00000000  00000ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000255  00000000  00000000  00000c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000124  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <sleep>:

#include <util/delay.h>

void sleep (uint8_t y)
{
	for(;y>0;y--)_delay_ms(1);
  6c:	88 23       	and	r24, r24
  6e:	39 f0       	breq	.+14     	; 0x7e <sleep+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	e6 e6       	ldi	r30, 0x66	; 102
  72:	fe e0       	ldi	r31, 0x0E	; 14
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <sleep+0x8>
  78:	00 00       	nop
  7a:	81 50       	subi	r24, 0x01	; 1
  7c:	c9 f7       	brne	.-14     	; 0x70 <sleep+0x4>
  7e:	08 95       	ret

00000080 <inititlaize_pwm>:
}
void inititlaize_pwm()
{
	TCCR0 |= 1<<WGM00 | 1<<WGM01 | 1<<CS00 | 1<<COM01;
  80:	83 b7       	in	r24, 0x33	; 51
  82:	89 66       	ori	r24, 0x69	; 105
  84:	83 bf       	out	0x33, r24	; 51
	
}
  86:	08 95       	ret

00000088 <set_pwm_cycle>:
void set_pwm_cycle(uint8_t x)
{
	
	OCR0 = x;
  88:	8c bf       	out	0x3c, r24	; 60
}
  8a:	08 95       	ret

0000008c <main>:
int main(void)
{
  8c:	ef 92       	push	r14
  8e:	ff 92       	push	r15
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
	inititlaize_pwm();
  98:	0e 94 40 00 	call	0x80	; 0x80 <inititlaize_pwm>
	DDRB |= 1<<3;
  9c:	bb 9a       	sbi	0x17, 3	; 23
	
	    while(1)
    {
        for(int i=0;i<=255;i++)
  9e:	c0 e0       	ldi	r28, 0x00	; 0
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	ff 24       	eor	r15, r15
  a4:	fa 94       	dec	r15
  a6:	00 e0       	ldi	r16, 0x00	; 0
  a8:	10 e0       	ldi	r17, 0x00	; 0
  aa:	07 c0       	rjmp	.+14     	; 0xba <main+0x2e>
		{
			set_pwm_cycle(i);
  ac:	8c 2f       	mov	r24, r28
  ae:	0e 94 44 00 	call	0x88	; 0x88 <set_pwm_cycle>
			sleep(10);
  b2:	8a e0       	ldi	r24, 0x0A	; 10
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <sleep>
	inititlaize_pwm();
	DDRB |= 1<<3;
	
	    while(1)
    {
        for(int i=0;i<=255;i++)
  b8:	21 96       	adiw	r28, 0x01	; 1
  ba:	cf 3f       	cpi	r28, 0xFF	; 255
  bc:	d1 05       	cpc	r29, r1
  be:	b1 f3       	breq	.-20     	; 0xac <main+0x20>
  c0:	ac f3       	brlt	.-22     	; 0xac <main+0x20>
  c2:	ef 2c       	mov	r14, r15
			set_pwm_cycle(i);
			sleep(10);
		}
		for(int j=255;j>0;j--)	
		{
			set_pwm_cycle(j);
  c4:	8e 2d       	mov	r24, r14
  c6:	0e 94 44 00 	call	0x88	; 0x88 <set_pwm_cycle>
			sleep(10);
  ca:	8a e0       	ldi	r24, 0x0A	; 10
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <sleep>
  d0:	ea 94       	dec	r14
        for(int i=0;i<=255;i++)
		{
			set_pwm_cycle(i);
			sleep(10);
		}
		for(int j=255;j>0;j--)	
  d2:	c1 f7       	brne	.-16     	; 0xc4 <main+0x38>
	inititlaize_pwm();
	DDRB |= 1<<3;
	
	    while(1)
    {
        for(int i=0;i<=255;i++)
  d4:	e8 01       	movw	r28, r16
  d6:	f1 cf       	rjmp	.-30     	; 0xba <main+0x2e>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
