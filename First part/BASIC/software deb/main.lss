
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a6  00000000  00000000  00000175  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000005d  00000000  00000000  0000021b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d2  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000098  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


void main(void)
{

DDRB=0x01;  //   also DDRB = 1 << PORTB0;
  80:	91 e0       	ldi	r25, 0x01	; 1
  82:	94 b9       	out	0x04, r25	; 4

PORTB  ^= ( 1 << PINB0); // toggle leds
  84:	85 b1       	in	r24, 0x05	; 5
  86:	89 27       	eor	r24, r25
  88:	85 b9       	out	0x05, r24	; 5

DDRB = 1 << PINB2;  // set pinb2 as output
  8a:	84 e0       	ldi	r24, 0x04	; 4
  8c:	84 b9       	out	0x04, r24	; 4

DDRB &= ~(1<<PINB1);   //  set pinb1 as input
  8e:	21 98       	cbi	0x04, 1	; 4

PORTB = 1 << PINB1; // set pinb1 as high ( as, if switch is pressed the pinb register holds value o at 1st pin)
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	85 b9       	out	0x05, r24	; 5
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
    pressed_confidence++;
		if( pressed_confidence > 500)
	{
		if(pressed == 0)
			{
				PORTB ^= (1 << PINB0);
  a0:	71 e0       	ldi	r23, 0x01	; 1
					PORTB ^= (1 << PINB2);
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	02 c0       	rjmp	.+4      	; 0xaa <main+0x2a>

DDRB = 1 << PINB2;  // set pinb2 as output

DDRB &= ~(1<<PINB1);   //  set pinb1 as input

PORTB = 1 << PINB1; // set pinb1 as high ( as, if switch is pressed the pinb register holds value o at 1st pin)
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0

while(1)

{

if (bit_is_clear(PINB,1))    //  the fn sees if the value at pinb eg is 0 at position 1
  aa:	19 99       	sbic	0x03, 1	; 3
  ac:	13 c0       	rjmp	.+38     	; 0xd4 <main+0x54>
  {
    pressed_confidence++;
  ae:	01 96       	adiw	r24, 0x01	; 1
		if( pressed_confidence > 500)
  b0:	e1 e0       	ldi	r30, 0x01	; 1
  b2:	85 3f       	cpi	r24, 0xF5	; 245
  b4:	9e 07       	cpc	r25, r30
  b6:	cc f3       	brlt	.-14     	; 0xaa <main+0x2a>
	{
		if(pressed == 0)
  b8:	21 15       	cp	r18, r1
  ba:	31 05       	cpc	r19, r1
  bc:	41 f4       	brne	.+16     	; 0xce <main+0x4e>
			{
				PORTB ^= (1 << PINB0);
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	87 27       	eor	r24, r23
  c2:	85 b9       	out	0x05, r24	; 5
					PORTB ^= (1 << PINB2);
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	86 27       	eor	r24, r22
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	eb cf       	rjmp	.-42     	; 0xaa <main+0x2a>
	}
  }
		
	else
	{	
	 released_confidence ++;
  d4:	4f 5f       	subi	r20, 0xFF	; 255
  d6:	5f 4f       	sbci	r21, 0xFF	; 255
	 if(released_confidence > 500)
  d8:	e1 e0       	ldi	r30, 0x01	; 1
  da:	45 3f       	cpi	r20, 0xF5	; 245
  dc:	5e 07       	cpc	r21, r30
  de:	1c f7       	brge	.-58     	; 0xa6 <main+0x26>
  e0:	e4 cf       	rjmp	.-56     	; 0xaa <main+0x2a>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
