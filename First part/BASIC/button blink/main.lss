
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000137  00000000  00000000  00000149  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c8  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013c  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ac  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000050  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <util/delay.h>

void main(void)
{
DDRB=0x01;  //   also DDRB = 1 << PORTB0;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	84 b9       	out	0x04, r24	; 4

DDRB &= ~(1<<PINB1);   //  set pinb1 as input
  84:	21 98       	cbi	0x04, 1	; 4

PORTB = 1 << PINB1; // set pinb1 as high ( as, if switch is pressed the pinb register holds value o at 1st pin)
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	85 b9       	out	0x05, r24	; 5

while(1)

{

PORTB ^= ~(0x01);         // also  PORTB  ^= 1<<PINB0;  // also PORTB &= ~(1 << PINB0)
  8a:	6e ef       	ldi	r22, 0xFE	; 254
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	40 e2       	ldi	r20, 0x20	; 32
  8e:	5e e4       	ldi	r21, 0x4E	; 78
  90:	28 ec       	ldi	r18, 0xC8	; 200
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	85 b1       	in	r24, 0x05	; 5
  96:	86 27       	eor	r24, r22
  98:	85 b9       	out	0x05, r24	; 5


if (bit_is_clear(PINB,1) )     //  the fn sees if the value at pinb eg is 0 at position 1
  9a:	19 99       	sbic	0x03, 1	; 3
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <main+0x26>
  9e:	ca 01       	movw	r24, r20
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x20>
  a4:	f7 cf       	rjmp	.-18     	; 0x94 <main+0x14>
  a6:	88 ee       	ldi	r24, 0xE8	; 232
  a8:	93 e0       	ldi	r25, 0x03	; 3
  aa:	f9 01       	movw	r30, r18
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b2:	d9 f7       	brne	.-10     	; 0xaa <main+0x2a>
  b4:	ef cf       	rjmp	.-34     	; 0x94 <main+0x14>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
