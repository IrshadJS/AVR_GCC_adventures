
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000095  00000000  00000000  0000017d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000069  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a8  00000000  00000000  0000027b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000006e  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <util/delay.h>


void main(void)
{
  80:	1f 93       	push	r17

DDRB = 0xff;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 b9       	out	0x04, r24	; 4

DDRD = 0xff;
  86:	8a b9       	out	0x0a, r24	; 10

int LEDnumber[2];

TCCR1B = 1 << CS10 | 1 << CS11 ;
  88:	83 e0       	ldi	r24, 0x03	; 3
  8a:	80 93 81 00 	sts	0x0081, r24
{

if (TCNT1>2232)
{
TCNT1 = 0;
PORTB = 1 << LEDnumber[0];
  8e:	a1 e0       	ldi	r26, 0x01	; 1
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	e1 e0       	ldi	r30, 0x01	; 1
  94:	f0 e0       	ldi	r31, 0x00	; 0

DDRD = 0xff;

int LEDnumber[2];

TCCR1B = 1 << CS10 | 1 << CS11 ;
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	74 2f       	mov	r23, r20
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	62 2f       	mov	r22, r18

while(1)

{

if (TCNT1>2232)
  a2:	80 91 84 00 	lds	r24, 0x0084
  a6:	90 91 85 00 	lds	r25, 0x0085
  aa:	89 5b       	subi	r24, 0xB9	; 185
  ac:	98 40       	sbci	r25, 0x08	; 8
  ae:	c8 f3       	brcs	.-14     	; 0xa2 <main+0x22>
{
TCNT1 = 0;
  b0:	10 92 85 00 	sts	0x0085, r1
  b4:	10 92 84 00 	sts	0x0084, r1
PORTB = 1 << LEDnumber[0];
  b8:	cd 01       	movw	r24, r26
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x40>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <main+0x3c>
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
LEDnumber[0]++;
if ( LEDnumber[0] >6)
  ca:	27 30       	cpi	r18, 0x07	; 7
  cc:	31 05       	cpc	r19, r1
  ce:	41 f7       	brne	.-48     	; 0xa0 <main+0x20>
{
LEDnumber[0]=0;
PORTD = 1 << LEDnumber[1];
  d0:	cf 01       	movw	r24, r30
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <main+0x58>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	7a 95       	dec	r23
  da:	e2 f7       	brpl	.-8      	; 0xd4 <main+0x54>
  dc:	8b b9       	out	0x0b, r24	; 11
  de:	4f 5f       	subi	r20, 0xFF	; 255
  e0:	5f 4f       	sbci	r21, 0xFF	; 255
LEDnumber[1]++;
if ( LEDnumber[1] > 6) LEDnumber[1]=0;
  e2:	47 30       	cpi	r20, 0x07	; 7
  e4:	51 05       	cpc	r21, r1
  e6:	b9 f2       	breq	.-82     	; 0x96 <main+0x16>
  e8:	d8 cf       	rjmp	.-80     	; 0x9a <main+0x1a>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
