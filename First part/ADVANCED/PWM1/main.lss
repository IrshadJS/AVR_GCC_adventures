
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000041  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001cc  00000000  00000000  00000169  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000012f  00000000  00000000  00000335  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000183  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b2  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  000006ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  0000072a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <InitPWM>:
   PWM Output  = Non Inverted

   */


   TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	89 66       	ori	r24, 0x69	; 105
  70:	83 bf       	out	0x33, r24	; 51

   //Set OC0 PIN as output. It is  PB3 on ATmega16 ATmega32

   DDRB|=(1<<PB3);
  72:	bb 9a       	sbi	0x17, 3	; 23
}
  74:	08 95       	ret

00000076 <SetPWMOutput>:
This can be used to control the brightness of LED or Speed of Motor.
*********************************************************************/

void SetPWMOutput(uint8_t duty)
{
   OCR0=duty;
  76:	8c bf       	out	0x3c, r24	; 60
}
  78:	08 95       	ret

0000007a <Wait>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	80 e8       	ldi	r24, 0x80	; 128
  7c:	9c e0       	ldi	r25, 0x0C	; 12
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <Wait+0x4>
*********************************************************************/

void Wait()
{
 _delay_loop_2(3200);
}
  82:	08 95       	ret

00000084 <main>:
   PWM Output  = Non Inverted

   */


   TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  84:	83 b7       	in	r24, 0x33	; 51
  86:	89 66       	ori	r24, 0x69	; 105
  88:	83 bf       	out	0x33, r24	; 51

   //Set OC0 PIN as output. It is  PB3 on ATmega16 ATmega32

   DDRB|=(1<<PB3);
  8a:	bb 9a       	sbi	0x17, 3	; 23
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	40 e8       	ldi	r20, 0x80	; 128
  90:	5c e0       	ldi	r21, 0x0C	; 12
  92:	05 c0       	rjmp	.+10     	; 0x9e <main+0x1a>
This can be used to control the brightness of LED or Speed of Motor.
*********************************************************************/

void SetPWMOutput(uint8_t duty)
{
   OCR0=duty;
  94:	2c bf       	out	0x3c, r18	; 60
  96:	ca 01       	movw	r24, r20
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x14>

   while(1)
   {
      //Now Loop with increasing brightness

      for(brightness=0;brightness<255;brightness++)
  9c:	2f 5f       	subi	r18, 0xFF	; 255
  9e:	2f 3f       	cpi	r18, 0xFF	; 255
  a0:	c9 f7       	brne	.-14     	; 0x94 <main+0x10>
This can be used to control the brightness of LED or Speed of Motor.
*********************************************************************/

void SetPWMOutput(uint8_t duty)
{
   OCR0=duty;
  a2:	2c bf       	out	0x3c, r18	; 60
  a4:	ca 01       	movw	r24, r20
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x22>
         Wait();
      }

      //Now Loop with decreasing brightness

      for(brightness=255;brightness>0;brightness--)
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	d1 f7       	brne	.-12     	; 0xa2 <main+0x1e>
  ae:	f7 cf       	rjmp	.-18     	; 0x9e <main+0x1a>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
