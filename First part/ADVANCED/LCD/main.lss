
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000420  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00000420  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000080  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000741  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001f9  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000054f  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014f  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003c1  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 30       	cpi	r26, 0x0E	; 14
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  7a:	0c 94 0e 02 	jmp	0x41c	; 0x41c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  82:	87 b3       	in	r24, 0x17	; 23
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
  88:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
  8a:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  8c:	82 e0       	ldi	r24, 0x02	; 2
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	34 e0       	ldi	r19, 0x04	; 4
  96:	c4 9a       	sbi	0x18, 4	; 24
  98:	82 2f       	mov	r24, r18
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  9e:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
  a0:	82 95       	swap	r24
  a2:	80 7f       	andi	r24, 0xF0	; 240
  a4:	92 2f       	mov	r25, r18
  a6:	9a 95       	dec	r25
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  aa:	c4 98       	cbi	0x18, 4	; 24
  ac:	93 2f       	mov	r25, r19
  ae:	9a 95       	dec	r25
  b0:	f1 f7       	brne	.-4      	; 0xae <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
  b2:	c4 9a       	sbi	0x18, 4	; 24
  b4:	92 2f       	mov	r25, r18
  b6:	9a 95       	dec	r25
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  ba:	96 b3       	in	r25, 0x16	; 22
  bc:	92 2f       	mov	r25, r18
  be:	9a 95       	dec	r25
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  c2:	c4 98       	cbi	0x18, 4	; 24
  c4:	93 2f       	mov	r25, r19
  c6:	9a 95       	dec	r25
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
  ca:	87 fd       	sbrc	r24, 7
  cc:	e4 cf       	rjmp	.-56     	; 0x96 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
  ce:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	8f 60       	ori	r24, 0x0F	; 15
  d4:	87 bb       	out	0x17, r24	; 23

}
  d6:	08 95       	ret

000000d8 <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
  d8:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
  da:	66 23       	and	r22, r22
  dc:	11 f4       	brne	.+4      	; 0xe2 <LCDByte+0xa>
	CLEAR_RS();
  de:	93 98       	cbi	0x12, 3	; 18
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <LCDByte+0xc>
else
	SET_RS();
  e2:	93 9a       	sbi	0x12, 3	; 18
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
  ea:	c4 9a       	sbi	0x18, 4	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	92 2f       	mov	r25, r18
  f0:	92 95       	swap	r25
  f2:	9f 70       	andi	r25, 0x0F	; 15
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
  f8:	98 bb       	out	0x18, r25	; 24
  fa:	94 e0       	ldi	r25, 0x04	; 4
  fc:	89 2f       	mov	r24, r25
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 102:	c4 98       	cbi	0x18, 4	; 24
 104:	89 2f       	mov	r24, r25
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 10a:	c4 9a       	sbi	0x18, 4	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 10c:	88 b3       	in	r24, 0x18	; 24
 10e:	2f 70       	andi	r18, 0x0F	; 15
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 114:	88 bb       	out	0x18, r24	; 24
 116:	89 2f       	mov	r24, r25
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 11c:	c4 98       	cbi	0x18, 4	; 24
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 122:	0e 94 41 00 	call	0x82	; 0x82 <LCDBusyLoop>
}
 126:	08 95       	ret

00000128 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
 12e:	10 c0       	rjmp	.+32     	; 0x150 <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 130:	85 32       	cpi	r24, 0x25	; 37
 132:	51 f4       	brne	.+20     	; 0x148 <LCDWriteString+0x20>
	{
		msg++;
 134:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 136:	88 81       	ld	r24, Y
 138:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	28 f0       	brcs	.+10     	; 0x148 <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 13e:	85 e2       	ldi	r24, 0x25	; 37
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>
			LCDData(*msg);
 146:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>
	}
	msg++;
 14e:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 150:	88 81       	ld	r24, Y
 152:	88 23       	and	r24, r24
 154:	69 f7       	brne	.-38     	; 0x130 <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	00 d0       	rcall	.+0      	; 0x16a <LCDWriteInt+0xe>
 16a:	00 d0       	rcall	.+0      	; 0x16c <LCDWriteInt+0x10>
 16c:	0f 92       	push	r0
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	9c 01       	movw	r18, r24
 174:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 176:	fe 01       	movw	r30, r28
 178:	31 96       	adiw	r30, 0x01	; 1
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	df 01       	movw	r26, r30
 17e:	1d 92       	st	X+, r1
 180:	8a 95       	dec	r24
 182:	e9 f7       	brne	.-6      	; 0x17e <LCDWriteInt+0x22>
 184:	fe 01       	movw	r30, r28
 186:	35 96       	adiw	r30, 0x05	; 5
 188:	0d c0       	rjmp	.+26     	; 0x1a4 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 18a:	c9 01       	movw	r24, r18
 18c:	6a e0       	ldi	r22, 0x0A	; 10
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__divmodhi4>
 194:	80 83       	st	Z, r24
	val=val/10;
 196:	c9 01       	movw	r24, r18
 198:	6a e0       	ldi	r22, 0x0A	; 10
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__divmodhi4>
 1a0:	9b 01       	movw	r18, r22
 1a2:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1a4:	21 15       	cp	r18, r1
 1a6:	31 05       	cpc	r19, r1
 1a8:	81 f7       	brne	.-32     	; 0x18a <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1aa:	bf ef       	ldi	r27, 0xFF	; 255
 1ac:	0f 3f       	cpi	r16, 0xFF	; 255
 1ae:	1b 07       	cpc	r17, r27
 1b0:	79 f4       	brne	.+30     	; 0x1d0 <LCDWriteInt+0x74>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 1b6:	ae 01       	movw	r20, r28
 1b8:	4f 5f       	subi	r20, 0xFF	; 255
 1ba:	5f 4f       	sbci	r21, 0xFF	; 255
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <LCDWriteInt+0x66>
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	fa 01       	movw	r30, r20
 1c4:	e2 0f       	add	r30, r18
 1c6:	f3 1f       	adc	r31, r19
 1c8:	80 81       	ld	r24, Z
 1ca:	88 23       	and	r24, r24
 1cc:	c1 f3       	breq	.-16     	; 0x1be <LCDWriteInt+0x62>
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 1d0:	25 e0       	ldi	r18, 0x05	; 5
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	20 1b       	sub	r18, r16
 1d6:	31 0b       	sbc	r19, r17
 1d8:	7e 01       	movw	r14, r28
 1da:	08 94       	sec
 1dc:	e1 1c       	adc	r14, r1
 1de:	f1 1c       	adc	r15, r1
 1e0:	e2 0e       	add	r14, r18
 1e2:	f3 1e       	adc	r15, r19
 1e4:	89 01       	movw	r16, r18
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 1e8:	f7 01       	movw	r30, r14
 1ea:	81 91       	ld	r24, Z+
 1ec:	7f 01       	movw	r14, r30
 1ee:	80 5d       	subi	r24, 0xD0	; 208
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 1f6:	0f 5f       	subi	r16, 0xFF	; 255
 1f8:	1f 4f       	sbci	r17, 0xFF	; 255
 1fa:	05 30       	cpi	r16, 0x05	; 5
 1fc:	11 05       	cpc	r17, r1
 1fe:	a4 f3       	brlt	.-24     	; 0x1e8 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	cf 91       	pop	r28
 20c:	df 91       	pop	r29
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	08 95       	ret

00000218 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 218:	84 31       	cpi	r24, 0x14	; 20
 21a:	78 f4       	brcc	.+30     	; 0x23a <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 21c:	62 30       	cpi	r22, 0x02	; 2
 21e:	31 f0       	breq	.+12     	; 0x22c <LCDGotoXY+0x14>
 220:	63 30       	cpi	r22, 0x03	; 3
 222:	31 f0       	breq	.+12     	; 0x230 <LCDGotoXY+0x18>
 224:	61 30       	cpi	r22, 0x01	; 1
 226:	29 f4       	brne	.+10     	; 0x232 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	03 c0       	rjmp	.+6      	; 0x232 <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 22c:	8c 5e       	subi	r24, 0xEC	; 236
 22e:	01 c0       	rjmp	.+2      	; 0x232 <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 230:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 232:	80 68       	ori	r24, 0x80	; 128
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>
 23a:	08 95       	ret

0000023c <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	18 2f       	mov	r17, r24
 244:	8c e2       	ldi	r24, 0x2C	; 44
 246:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 248:	20 e7       	ldi	r18, 0x70	; 112
 24a:	31 e0       	ldi	r19, 0x01	; 1
 24c:	f9 01       	movw	r30, r18
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCDInit+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 252:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 254:	d9 f7       	brne	.-10     	; 0x24c <LCDInit+0x10>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 256:	87 b3       	in	r24, 0x17	; 23
 258:	8f 60       	ori	r24, 0x0F	; 15
 25a:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 25c:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 25e:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 260:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 262:	88 b3       	in	r24, 0x18	; 24
 264:	80 7f       	andi	r24, 0xF0	; 240
 266:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 268:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 26a:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 26c:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	8a 95       	dec	r24
 272:	f1 f7       	brne	.-4      	; 0x270 <LCDInit+0x34>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 274:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 276:	c1 9a       	sbi	0x18, 1	; 24
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	98 2f       	mov	r25, r24
 27c:	9a 95       	dec	r25
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCDInit+0x40>
	_delay_us(1);
	CLEAR_E();
 280:	c4 98       	cbi	0x18, 4	; 24
 282:	8a 95       	dec	r24
 284:	f1 f7       	brne	.-4      	; 0x282 <LCDInit+0x46>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 286:	0e 94 41 00 	call	0x82	; 0x82 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 28a:	81 2f       	mov	r24, r17
 28c:	8c 60       	ori	r24, 0x0C	; 12
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 294:	88 e2       	ldi	r24, 0x28	; 40
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 29c:	80 e4       	ldi	r24, 0x40	; 64
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>
 2a4:	ce ec       	ldi	r28, 0xCE	; 206
 2a6:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 2a8:	89 91       	ld	r24, Y+
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	ce 30       	cpi	r28, 0x0E	; 14
 2b4:	d8 07       	cpc	r29, r24
 2b6:	c1 f7       	brne	.-16     	; 0x2a8 <LCDInit+0x6c>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	0e 94 0c 01 	call	0x218	; 0x218 <LCDGotoXY>

}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	08 95       	ret

000002c8 <main>:
#include <util/delay.h>
#include "lcd.c"
#include "lcd.h"

void main()
{
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
     unsigned char i;

   //Initialize LCD module
   LCDInit(LS_BLINK|LS_ULINE);
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	0e 94 1e 01 	call	0x23c	; 0x23c <LCDInit>

   //Clear the screen
   LCDClear();
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>

   //Simple string printing
   LCDWriteString("Congrats ");
 2de:	80 e6       	ldi	r24, 0x60	; 96
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 94 00 	call	0x128	; 0x128 <LCDWriteString>

   //A string on line 2
   LCDWriteStringXY(0,1,"Loading ");
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	0e 94 0c 01 	call	0x218	; 0x218 <LCDGotoXY>
 2ee:	8a e6       	ldi	r24, 0x6A	; 106
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 94 00 	call	0x128	; 0x128 <LCDWriteString>
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2fa:	00 e0       	ldi	r16, 0x00	; 0
 2fc:	10 e0       	ldi	r17, 0x00	; 0

   //Print some numbers
   for (i=0;i<99;i+=1)
   {
      LCDWriteIntXY(9,1,i,3);
 2fe:	89 e0       	ldi	r24, 0x09	; 9
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	0e 94 0c 01 	call	0x218	; 0x218 <LCDGotoXY>
 306:	ce 01       	movw	r24, r28
 308:	63 e0       	ldi	r22, 0x03	; 3
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	0e 94 ae 00 	call	0x15c	; 0x15c <LCDWriteInt>
      LCDWriteStringXY(12,1,"% ");
 310:	8c e0       	ldi	r24, 0x0C	; 12
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	0e 94 0c 01 	call	0x218	; 0x218 <LCDGotoXY>
 318:	83 e7       	ldi	r24, 0x73	; 115
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 94 00 	call	0x128	; 0x128 <LCDWriteString>
 320:	c8 01       	movw	r24, r16
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <main+0x5a>

   //A string on line 2
   LCDWriteStringXY(0,1,"Loading ");

   //Print some numbers
   for (i=0;i<99;i+=1)
 326:	c8 01       	movw	r24, r16
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0x60>
 32c:	c8 01       	movw	r24, r16
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <main+0x66>
 332:	c8 01       	movw	r24, r16
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <main+0x6c>
 338:	21 96       	adiw	r28, 0x01	; 1
 33a:	c3 36       	cpi	r28, 0x63	; 99
 33c:	d1 05       	cpc	r29, r1
 33e:	f9 f6       	brne	.-66     	; 0x2fe <main+0x36>
      _delay_loop_2(0);

   }

   //Clear the screen
   LCDClear();
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>

   //Some more text

   LCDWriteString("Hello world");
 348:	86 e7       	ldi	r24, 0x76	; 118
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 94 00 	call	0x128	; 0x128 <LCDWriteString>
   LCDWriteStringXY(0,1,"By YourName Here");    // <--- Write ur NAME HERE !!!!!!!!!!!
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	0e 94 0c 01 	call	0x218	; 0x218 <LCDGotoXY>
 358:	82 e8       	ldi	r24, 0x82	; 130
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 94 00 	call	0x128	; 0x128 <LCDWriteString>
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	ca 01       	movw	r24, r20
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <main+0xa0>

   //Wait
   for(i=0;i<100;i++) _delay_loop_2(0);
 36c:	2f 5f       	subi	r18, 0xFF	; 255
 36e:	24 36       	cpi	r18, 0x64	; 100
 370:	d1 f7       	brne	.-12     	; 0x366 <main+0x9e>

   //Some More ......
   LCDClear();
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>
   LCDWriteString("    eXtreme");
 37a:	83 e9       	ldi	r24, 0x93	; 147
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 94 00 	call	0x128	; 0x128 <LCDWriteString>
   LCDWriteStringXY(0,1,"  Electronics");
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	0e 94 0c 01 	call	0x218	; 0x218 <LCDGotoXY>
 38a:	8f e9       	ldi	r24, 0x9F	; 159
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 94 00 	call	0x128	; 0x128 <LCDWriteString>
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	ca 01       	movw	r24, r20
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <main+0xd2>

	//Wait
   for(i=0;i<100;i++) _delay_loop_2(0);
 39e:	2f 5f       	subi	r18, 0xFF	; 255
 3a0:	24 36       	cpi	r18, 0x64	; 100
 3a2:	d1 f7       	brne	.-12     	; 0x398 <main+0xd0>

   //Custom Chars ......
   LCDClear();
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCDByte>
   LCDWriteString("Custom Char !!!");
 3ac:	8d ea       	ldi	r24, 0xAD	; 173
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 94 00 	call	0x128	; 0x128 <LCDWriteString>
   LCDWriteStringXY(0,1,"%0%1%2%3%4%5%6%7");
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	0e 94 0c 01 	call	0x218	; 0x218 <LCDGotoXY>
 3bc:	8d eb       	ldi	r24, 0xBD	; 189
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 94 00 	call	0x128	; 0x128 <LCDWriteString>

}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	08 95       	ret

000003ce <__divmodhi4>:
 3ce:	97 fb       	bst	r25, 7
 3d0:	09 2e       	mov	r0, r25
 3d2:	07 26       	eor	r0, r23
 3d4:	0a d0       	rcall	.+20     	; 0x3ea <__divmodhi4_neg1>
 3d6:	77 fd       	sbrc	r23, 7
 3d8:	04 d0       	rcall	.+8      	; 0x3e2 <__divmodhi4_neg2>
 3da:	0c d0       	rcall	.+24     	; 0x3f4 <__udivmodhi4>
 3dc:	06 d0       	rcall	.+12     	; 0x3ea <__divmodhi4_neg1>
 3de:	00 20       	and	r0, r0
 3e0:	1a f4       	brpl	.+6      	; 0x3e8 <__divmodhi4_exit>

000003e2 <__divmodhi4_neg2>:
 3e2:	70 95       	com	r23
 3e4:	61 95       	neg	r22
 3e6:	7f 4f       	sbci	r23, 0xFF	; 255

000003e8 <__divmodhi4_exit>:
 3e8:	08 95       	ret

000003ea <__divmodhi4_neg1>:
 3ea:	f6 f7       	brtc	.-4      	; 0x3e8 <__divmodhi4_exit>
 3ec:	90 95       	com	r25
 3ee:	81 95       	neg	r24
 3f0:	9f 4f       	sbci	r25, 0xFF	; 255
 3f2:	08 95       	ret

000003f4 <__udivmodhi4>:
 3f4:	aa 1b       	sub	r26, r26
 3f6:	bb 1b       	sub	r27, r27
 3f8:	51 e1       	ldi	r21, 0x11	; 17
 3fa:	07 c0       	rjmp	.+14     	; 0x40a <__udivmodhi4_ep>

000003fc <__udivmodhi4_loop>:
 3fc:	aa 1f       	adc	r26, r26
 3fe:	bb 1f       	adc	r27, r27
 400:	a6 17       	cp	r26, r22
 402:	b7 07       	cpc	r27, r23
 404:	10 f0       	brcs	.+4      	; 0x40a <__udivmodhi4_ep>
 406:	a6 1b       	sub	r26, r22
 408:	b7 0b       	sbc	r27, r23

0000040a <__udivmodhi4_ep>:
 40a:	88 1f       	adc	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	5a 95       	dec	r21
 410:	a9 f7       	brne	.-22     	; 0x3fc <__udivmodhi4_loop>
 412:	80 95       	com	r24
 414:	90 95       	com	r25
 416:	bc 01       	movw	r22, r24
 418:	cd 01       	movw	r24, r26
 41a:	08 95       	ret

0000041c <_exit>:
 41c:	f8 94       	cli

0000041e <__stop_program>:
 41e:	ff cf       	rjmp	.-2      	; 0x41e <__stop_program>
