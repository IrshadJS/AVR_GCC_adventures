
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000298  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000da  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000358  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000141  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002c7  00000000  00000000  000008a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000197  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e0  00000000  00000000  00000da3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_21>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  8e:	0c 94 4a 01 	jmp	0x294	; 0x294 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <Peek_A_Boo>:
DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
}

void Peek_A_Boo()
{
MrLCDsControl |= 1<<LightSwitch;
  96:	5d 9a       	sbi	0x0b, 5	; 11
asm volatile ("nop");
  98:	00 00       	nop
asm volatile ("nop");
  9a:	00 00       	nop
MrLCDsControl &= ~1<<LightSwitch;
  9c:	8b b1       	in	r24, 0x0b	; 11
  9e:	80 7c       	andi	r24, 0xC0	; 192
  a0:	8b b9       	out	0x0b, r24	; 11
}
  a2:	08 95       	ret

000000a4 <Check_IF_MrLCD_isBusy>:
void GotoMrLCDsLocation(uint8_t x, uint8_t y);
void InitializeMrLCD(void);

void Check_IF_MrLCD_isBusy()
{
DataDir_MrLCDsCrib = 0;
  a4:	14 b8       	out	0x04, r1	; 4
MrLCDsControl |= 1<<ReadWrite;
  a6:	5f 9a       	sbi	0x0b, 7	; 11
MrLCDsControl &= ~1<<BiPolarMood;
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	8b b9       	out	0x0b, r24	; 11
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <Check_IF_MrLCD_isBusy+0x10>

while (MrLCDsCrib >= 0x80)
{
Peek_A_Boo();
  b0:	0e 94 4b 00 	call	0x96	; 0x96 <Peek_A_Boo>
{
DataDir_MrLCDsCrib = 0;
MrLCDsControl |= 1<<ReadWrite;
MrLCDsControl &= ~1<<BiPolarMood;

while (MrLCDsCrib >= 0x80)
  b4:	2f 99       	sbic	0x05, 7	; 5
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <Check_IF_MrLCD_isBusy+0xc>
{
Peek_A_Boo();
}

DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 b9       	out	0x04, r24	; 4
}
  bc:	08 95       	ret

000000be <Send_A_Command>:
asm volatile ("nop");
MrLCDsControl &= ~1<<LightSwitch;
}

void Send_A_Command(unsigned char command)
{
  be:	1f 93       	push	r17
  c0:	18 2f       	mov	r17, r24
Check_IF_MrLCD_isBusy();
  c2:	0e 94 52 00 	call	0xa4	; 0xa4 <Check_IF_MrLCD_isBusy>
MrLCDsCrib = command;
  c6:	15 b9       	out	0x05, r17	; 5
MrLCDsControl &= ~ ((1<<ReadWrite)|(1<<BiPolarMood));
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	8b 77       	andi	r24, 0x7B	; 123
  cc:	8b b9       	out	0x0b, r24	; 11
Peek_A_Boo();
  ce:	0e 94 4b 00 	call	0x96	; 0x96 <Peek_A_Boo>
MrLCDsCrib = 0;
  d2:	15 b8       	out	0x05, r1	; 5
}
  d4:	1f 91       	pop	r17
  d6:	08 95       	ret

000000d8 <Send_A_Character>:

void Send_A_Character(unsigned char character)
{
  d8:	1f 93       	push	r17
  da:	18 2f       	mov	r17, r24
Check_IF_MrLCD_isBusy();
  dc:	0e 94 52 00 	call	0xa4	; 0xa4 <Check_IF_MrLCD_isBusy>
MrLCDsCrib = character;
  e0:	15 b9       	out	0x05, r17	; 5
MrLCDsControl &= ~ (1<<ReadWrite);
  e2:	5f 98       	cbi	0x0b, 7	; 11
MrLCDsControl |= 1<<BiPolarMood;
  e4:	5a 9a       	sbi	0x0b, 2	; 11
Peek_A_Boo();
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <Peek_A_Boo>
MrLCDsCrib = 0;
  ea:	15 b8       	out	0x05, r1	; 5
}
  ec:	1f 91       	pop	r17
  ee:	08 95       	ret

000000f0 <Send_A_String>:

void Send_A_String(char *StringOfCharacters)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	ec 01       	movw	r28, r24
  f6:	03 c0       	rjmp	.+6      	; 0xfe <Send_A_String+0xe>
while(*StringOfCharacters > 0)
{
Send_A_Character(*StringOfCharacters++);
  f8:	21 96       	adiw	r28, 0x01	; 1
  fa:	0e 94 6c 00 	call	0xd8	; 0xd8 <Send_A_Character>
MrLCDsCrib = 0;
}

void Send_A_String(char *StringOfCharacters)
{
while(*StringOfCharacters > 0)
  fe:	88 81       	ld	r24, Y
 100:	88 23       	and	r24, r24
 102:	d1 f7       	brne	.-12     	; 0xf8 <Send_A_String+0x8>
{
Send_A_Character(*StringOfCharacters++);
}
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <GotoMrLCDsLocation>:

void GotoMrLCDsLocation(uint8_t x, uint8_t y)
{
Send_A_Command(0x80 + firstColumnPositionsForMrLCD[y-1] + (x-1));
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	e0 e0       	ldi	r30, 0x00	; 0
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	e6 0f       	add	r30, r22
 112:	f1 1d       	adc	r31, r1
 114:	90 81       	ld	r25, Z
 116:	89 0f       	add	r24, r25
 118:	0e 94 5f 00 	call	0xbe	; 0xbe <Send_A_Command>
}
 11c:	08 95       	ret

0000011e <InitializeMrLCD>:

void InitializeMrLCD()
{
 11e:	1f 93       	push	r17
DataDir_MrLCDsControl |= 1<<LightSwitch | 1<<ReadWrite | 1<<BiPolarMood;
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	84 6a       	ori	r24, 0xA4	; 164
 124:	8a b9       	out	0x0a, r24	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 126:	80 e3       	ldi	r24, 0x30	; 48
 128:	95 e7       	ldi	r25, 0x75	; 117
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <InitializeMrLCD+0xc>
_delay_ms(15);

Send_A_Command(0x01); //Clear Screen 0x01 = 00000001
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 5f 00 	call	0xbe	; 0xbe <Send_A_Command>
 134:	80 ea       	ldi	r24, 0xA0	; 160
 136:	9f e0       	ldi	r25, 0x0F	; 15
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <InitializeMrLCD+0x1a>
_delay_ms(2);
Send_A_Command(0x38);
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	0e 94 5f 00 	call	0xbe	; 0xbe <Send_A_Command>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 142:	15 e8       	ldi	r17, 0x85	; 133
 144:	81 2f       	mov	r24, r17
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <InitializeMrLCD+0x28>
_delay_us(50);
Send_A_Command(0b00001110);
 14a:	8e e0       	ldi	r24, 0x0E	; 14
 14c:	0e 94 5f 00 	call	0xbe	; 0xbe <Send_A_Command>
 150:	1a 95       	dec	r17
 152:	f1 f7       	brne	.-4      	; 0x150 <InitializeMrLCD+0x32>
_delay_us(50);
}
 154:	1f 91       	pop	r17
 156:	08 95       	ret

00000158 <main>:

void main ( void)

{

sei();
 158:	78 94       	sei


ADMUX |= 1<<ADLAR | 1 << REFS0;
 15a:	80 91 7c 00 	lds	r24, 0x007C
 15e:	80 66       	ori	r24, 0x60	; 96
 160:	80 93 7c 00 	sts	0x007C, r24

ADCSRA |= 1 << ADEN | 1 <<ADPS2 | 1<<ADIE | 1<<ADSC;
 164:	80 91 7a 00 	lds	r24, 0x007A
 168:	8c 6c       	ori	r24, 0xCC	; 204
 16a:	80 93 7a 00 	sts	0x007A, r24
 16e:	ff cf       	rjmp	.-2      	; 0x16e <main+0x16>

00000170 <__vector_21>:

}

ISR (ADC_vect)

{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	00 d0       	rcall	.+0      	; 0x19c <__vector_21+0x2c>
 19c:	00 d0       	rcall	.+0      	; 0x19e <__vector_21+0x2e>
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62

char adcresult[4];
itoa(ADCH,adcresult,10);
 1a2:	80 91 79 00 	lds	r24, 0x0079
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	8e 01       	movw	r16, r28
 1aa:	0f 5f       	subi	r16, 0xFF	; 255
 1ac:	1f 4f       	sbci	r17, 0xFF	; 255
 1ae:	b8 01       	movw	r22, r16
 1b0:	4a e0       	ldi	r20, 0x0A	; 10
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	0e 94 05 01 	call	0x20a	; 0x20a <itoa>
GotoMrLCDsLocation(1,1);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	0e 94 85 00 	call	0x10a	; 0x10a <GotoMrLCDsLocation>
Send_A_String(adcresult);
 1c0:	c8 01       	movw	r24, r16
 1c2:	0e 94 78 00 	call	0xf0	; 0xf0 <Send_A_String>
Send_A_String("");
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 78 00 	call	0xf0	; 0xf0 <Send_A_String>
ADCSRA |= 1<< ADSC;
 1ce:	ea e7       	ldi	r30, 0x7A	; 122
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	80 83       	st	Z, r24

 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	7f 91       	pop	r23
 1f2:	6f 91       	pop	r22
 1f4:	5f 91       	pop	r21
 1f6:	4f 91       	pop	r20
 1f8:	3f 91       	pop	r19
 1fa:	2f 91       	pop	r18
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <itoa>:
 20a:	fb 01       	movw	r30, r22
 20c:	9f 01       	movw	r18, r30
 20e:	e8 94       	clt
 210:	42 30       	cpi	r20, 0x02	; 2
 212:	c4 f0       	brlt	.+48     	; 0x244 <itoa+0x3a>
 214:	45 32       	cpi	r20, 0x25	; 37
 216:	b4 f4       	brge	.+44     	; 0x244 <itoa+0x3a>
 218:	4a 30       	cpi	r20, 0x0A	; 10
 21a:	29 f4       	brne	.+10     	; 0x226 <itoa+0x1c>
 21c:	97 fb       	bst	r25, 7
 21e:	1e f4       	brtc	.+6      	; 0x226 <itoa+0x1c>
 220:	90 95       	com	r25
 222:	81 95       	neg	r24
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	64 2f       	mov	r22, r20
 228:	77 27       	eor	r23, r23
 22a:	0e 94 36 01 	call	0x26c	; 0x26c <__udivmodhi4>
 22e:	80 5d       	subi	r24, 0xD0	; 208
 230:	8a 33       	cpi	r24, 0x3A	; 58
 232:	0c f0       	brlt	.+2      	; 0x236 <itoa+0x2c>
 234:	89 5d       	subi	r24, 0xD9	; 217
 236:	81 93       	st	Z+, r24
 238:	cb 01       	movw	r24, r22
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	a1 f7       	brne	.-24     	; 0x226 <itoa+0x1c>
 23e:	16 f4       	brtc	.+4      	; 0x244 <itoa+0x3a>
 240:	5d e2       	ldi	r21, 0x2D	; 45
 242:	51 93       	st	Z+, r21
 244:	10 82       	st	Z, r1
 246:	c9 01       	movw	r24, r18
 248:	0c 94 26 01 	jmp	0x24c	; 0x24c <strrev>

0000024c <strrev>:
 24c:	dc 01       	movw	r26, r24
 24e:	fc 01       	movw	r30, r24
 250:	67 2f       	mov	r22, r23
 252:	71 91       	ld	r23, Z+
 254:	77 23       	and	r23, r23
 256:	e1 f7       	brne	.-8      	; 0x250 <strrev+0x4>
 258:	32 97       	sbiw	r30, 0x02	; 2
 25a:	04 c0       	rjmp	.+8      	; 0x264 <strrev+0x18>
 25c:	7c 91       	ld	r23, X
 25e:	6d 93       	st	X+, r22
 260:	70 83       	st	Z, r23
 262:	62 91       	ld	r22, -Z
 264:	ae 17       	cp	r26, r30
 266:	bf 07       	cpc	r27, r31
 268:	c8 f3       	brcs	.-14     	; 0x25c <strrev+0x10>
 26a:	08 95       	ret

0000026c <__udivmodhi4>:
 26c:	aa 1b       	sub	r26, r26
 26e:	bb 1b       	sub	r27, r27
 270:	51 e1       	ldi	r21, 0x11	; 17
 272:	07 c0       	rjmp	.+14     	; 0x282 <__udivmodhi4_ep>

00000274 <__udivmodhi4_loop>:
 274:	aa 1f       	adc	r26, r26
 276:	bb 1f       	adc	r27, r27
 278:	a6 17       	cp	r26, r22
 27a:	b7 07       	cpc	r27, r23
 27c:	10 f0       	brcs	.+4      	; 0x282 <__udivmodhi4_ep>
 27e:	a6 1b       	sub	r26, r22
 280:	b7 0b       	sbc	r27, r23

00000282 <__udivmodhi4_ep>:
 282:	88 1f       	adc	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	5a 95       	dec	r21
 288:	a9 f7       	brne	.-22     	; 0x274 <__udivmodhi4_loop>
 28a:	80 95       	com	r24
 28c:	90 95       	com	r25
 28e:	bc 01       	movw	r22, r24
 290:	cd 01       	movw	r24, r26
 292:	08 95       	ret

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
